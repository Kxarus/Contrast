//
//  MainDashboardInteractor.swift
//  contrast
//
//  Created by Roman Kiruxin on 29.06.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainDashboardBusinessLogic {
    func make(request: MainDashboard.Model.Request.RequestType)
}

protocol MainDashboardDataStore: AnyObject {
    
}

final class MainDashboardInteractor {
    
    // MARK: - External vars
    var presenter: MainDashboardPresentationLogic?
    var worker: MainDashboardWorker?
    
    // MARK: - Internal vars
    private let service: Services
    
    init(service: NetworkServiceable) {
        self.service = Services(service: service)
    }
}

// MARK: - Business logic
extension MainDashboardInteractor: MainDashboardBusinessLogic {
    
    func make(request: MainDashboard.Model.Request.RequestType) {
        switch request {
        case .fetchStories:
            fetchStories()
        }
    }
}

// MARK: - Data store
extension MainDashboardInteractor: MainDashboardDataStore  {
   
}

// MARK: - Private methods
private extension MainDashboardInteractor {
    private func fetchStories() {
        service.performStories { [weak self] result in
            switch result {
            case .success(let response):
                print(response)
                self!.presenter?.presentData(response: .stories(response))
            case .failure(let error):
                MessageService.showError(error)
            }
        }
    }
}
