//
//  MainDashboardViewController.swift
//  contrast
//
//  Created by Roman Kiruxin on 29.06.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftMessages

protocol MainDashboardDisplayLogic: AnyObject {
    func display(viewModel: MainDashboard.Model.ViewModel.ViewModelType)
}

final class MainDashboardViewController: UIViewController {
    
    // MARK: - IBOutlets
    private let tableView: UITableView = {
        let tableView = UITableView(frame: .zero, style: .grouped)
        tableView.register(cellTypes: [PromotionTableViewCell.self,
                                       NewOrderTableViewCell.self,
                                       ActiveOrderTableViewCell.self,
                                       RegistrationOnTrustCell.self])
        return tableView
    }()

    private let headerView = UIView()
    private let headerLabel: UILabel = {
        let label = UILabel()
        label.font = GeneralFonts.generalRegular24
        label.textColor = UIColor.textDark
        label.text = R.string.localizable.activeOrders()
        return label
    }()
    
    private let countView: UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.accent
        view.layer.cornerRadius = 14
        return view
    }()
    
    private let countLabel: UILabel = {
        let label = UILabel()
        label.font = GeneralFonts.generalRegular11
        label.textColor = UIColor.black
        return label
    }()
    
    // MARK: - External vars
    var interactor: MainDashboardBusinessLogic?
    var router: (NSObjectProtocol & MainDashboardRoutingLogic & MainDashboardDataPassing)?
    private let analytics = AnalyticsService.shared
    
    // MARK: - Internal vars
    private var stories: [StoriesModel] = []
    var orderModel = [
        OrderModel(id: 1, status: .created, orderNumber: "3566768", reciept: "3478933045", sum: 3900.0, pickupTime: "c 12:00 до 14:00", pickupDate: "Вт 23 сентября", deliveryTime: "c 12:00 до 14:00", deliveryDate: "Вт 28 сентября", paymentType: .card, estimate: 3, hasDelivery: true, pickupPointDate: "24.04.2023", pickupPointAdress: "Ул. Покровская д.14"),
        OrderModel(id: 1, status: .onWay, orderNumber: "3566768", reciept: "3478933045", sum: 3900.0, pickupTime: "c 12:00 до 14:00", pickupDate: "Вт 25 сентября", deliveryTime: "c 12:00 до 14:00", deliveryDate: "Вт 28 сентября", paymentType: .card, estimate: 3, hasDelivery: true, pickupPointDate: "24.04.2023", pickupPointAdress: "Ул. Покровская д.14"),
        OrderModel(id: 1, status: .agreement, orderNumber: "3566768", reciept: "3478933045", sum: 3900.0, pickupTime: "c 12:00 до 14:00", pickupDate: "Вт 26 сентября", deliveryTime: "c 12:00 до 14:00", deliveryDate: "Вт 28 сентября", paymentType: .card, estimate: 3, hasDelivery: true, pickupPointDate: "24.04.2023", pickupPointAdress: "Ул. Покровская д.14"),
        OrderModel(id: 1, status: .approved, orderNumber: "3566768", reciept: "3478933045", sum: 3900.0, pickupTime: "c 12:00 до 14:00", pickupDate: "Вт 27 сентября", deliveryTime: "c 12:00 до 14:00", deliveryDate: "Вт 28 сентября", paymentType: .card, estimate: 3, hasDelivery: true, pickupPointDate: "24.04.2023", pickupPointAdress: "Ул. Покровская д.14"),
        OrderModel(id: 1, status: .inProgress, orderNumber: "3566768", reciept: "3478933045", sum: 3900.0, pickupTime: "c 12:00 до 14:00", pickupDate: "Вт 28 сентября", deliveryTime: "c 12:00 до 14:00", deliveryDate: "Вт 28 сентября", paymentType: .card, estimate: 3, hasDelivery: true, pickupPointDate: "24.04.2023", pickupPointAdress: "Ул. Покровская д.14"),
        OrderModel(id: 1, status: .ready, orderNumber: "3566768", reciept: "3478933045", sum: 3900.0, pickupTime: "c 12:00 до 14:00", pickupDate: "Вт 29 сентября", deliveryTime: "c 12:00 до 14:00", deliveryDate: "Вт 28 сентября", paymentType: .card, estimate: 3, hasDelivery: true, pickupPointDate: "24.04.2023", pickupPointAdress: "Ул. Покровская д.14"),
        OrderModel(id: 1, status: .done, orderNumber: "3566768", reciept: "3478933045", sum: 3900.0, pickupTime: "c 12:00 до 14:00", pickupDate: "Вт 23 сентября", deliveryTime: "c 12:00 до 14:00", deliveryDate: "Вт 28 сентября", paymentType: .card, estimate: 0, hasDelivery: true, pickupPointDate: "24.04.2023", pickupPointAdress: "Ул. Покровская д.14"),
        OrderModel(id: 1, status: .done, orderNumber: "3566768", reciept: "3478933045", sum: 3900.0, pickupTime: "c 12:00 до 14:00", pickupDate: "Вт 23 сентября", deliveryTime: "c 12:00 до 14:00", deliveryDate: "Вт 28 сентября", paymentType: .card, estimate: 3, hasDelivery: true, pickupPointDate: "24.04.2023", pickupPointAdress: "Ул. Покровская д.14"),
        OrderModel(id: 1, status: .rejected, orderNumber: "3566768", reciept: "3478933045", sum: 3900.0, pickupTime: "c 12:00 до 14:00", pickupDate: "Вт 23 сентября", deliveryTime: "c 12:00 до 14:00", deliveryDate: "Вт 28 сентября", paymentType: .card, estimate: 3, hasDelivery: true, pickupPointDate: "24.04.2023", pickupPointAdress: "Ул. Покровская д.14"),
        OrderModel(id: 1, status: .refund, orderNumber: "3566768", reciept: "3478933045", sum: 3900.0, pickupTime: "c 12:00 до 14:00", pickupDate: "Вт 23 сентября", deliveryTime: "c 12:00 до 14:00", deliveryDate: "Вт 28 сентября", paymentType: .card, estimate: 3, hasDelivery: true, pickupPointDate: "24.04.2023", pickupPointAdress: "Ул. Покровская д.14"),
        OrderModel(id: 1, status: .keeping, orderNumber: "3566768", reciept: "3478933045", sum: 3900.0, pickupTime: "c 12:00 до 14:00", pickupDate: "Вт 23 сентября", deliveryTime: "c 12:00 до 14:00", deliveryDate: "Вт 28 сентября", paymentType: .card, estimate: 3, hasDelivery: true, pickupPointDate: "24.04.2023", pickupPointAdress: "Ул. Покровская д.14")
    ]
    
    private var isConnectedToVpn: Bool {
        if let settings = CFNetworkCopySystemProxySettings()?.takeRetainedValue() as? Dictionary<String, Any>,
            let scopes = settings["__SCOPED__"] as? [String:Any] {
            for (key, _) in scopes {
             if key.contains("tap") || key.contains("tun") || key.contains("ppp") || key.contains("ipsec") {
                    return true
                }
            }
        }
        return false
    }
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        MainDashboardConfigurator.shared.configure(self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        MainDashboardConfigurator.shared.configure(self)
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
}

// MARK: - Display logic
extension MainDashboardViewController: MainDashboardDisplayLogic {
    
    func display(viewModel: MainDashboard.Model.ViewModel.ViewModelType) {
        switch viewModel {
        case .presentStories(let viewModel):
            stories = viewModel
            tableView.reloadRows(at: [IndexPath(item: 0, section: 0)], with: .none)
        }
    }
}

// MARK: - TableView Data Sourse
extension MainDashboardViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        section == 2 ? orderModel.count : 1
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        4
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.section {
        case 0:
            let cell = tableView.dequeueReusableCell(of: PromotionTableViewCell.self)
            cell.setupCell(with: stories)
            cell.selectionStyle = .none
            cell.delegate = self
            return cell
        case 1:
            let cell = tableView.dequeueReusableCell(of: RegistrationOnTrustCell.self)
            cell.selectionStyle = .none
            cell.delegate = self
            return cell
        case 2:
            let cell = tableView.dequeueReusableCell(of: ActiveOrderTableViewCell.self)
            cell.selectionStyle = .none
            cell.setupCell(model: orderModel[indexPath.row])
            cell.delegate = self
            return cell
        case 3:
            let cell = tableView.dequeueReusableCell(of: NewOrderTableViewCell.self)
            cell.selectionStyle = .none
            cell.delegate = self
            return cell
        default:
            return UITableViewCell()
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.section {
        case 0:
            return stories.isEmpty ? 0 : 127
        default:
            return UITableView.automaticDimension
        }
    }
}

// MARK: - TableView Delegate
extension MainDashboardViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return section == 2 ? 52 : CGFloat.leastNormalMagnitude
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        return section == 2 ? headerView : UIView(frame: .zero)
    }
    
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        return UIView(frame: .zero)
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return CGFloat.leastNormalMagnitude
    }
}


// MARK: - Private methods
private extension MainDashboardViewController {
    private func setupView() {
        view.backgroundColor = .mainBackgroundColor
        view.addSubview(tableView)
        
        setupNavigationBar()
        configureTableView()
        vpnCheck()
        setupConstraints()
        analytics.routeTo(screen: .mainDashboard)
        
        interactor?.make(request: .fetchStories)
        countLabel.text = String(orderModel.count)
    }
    
    private func vpnCheck() {
        if isConnectedToVpn {
            showMessage()
        }
    }
    
    private func showMessage() {
        var config = SwiftMessages.defaultConfig
        config.presentationStyle = .top
        config.duration = .seconds(seconds: 5)
        config.dimMode = .none

        let view = MessageView.viewFromNib(layout: .messageView)
        view.configureTheme(.warning)
        view.configureContent(title: nil, body: R.string.localizable.vpnMessage(), iconImage: R.image.vpnErrorIcon(), iconText: nil, buttonImage: nil, buttonTitle: nil, buttonTapHandler: nil)

        view.configureTheme(
            backgroundColor: .borderCard,
            foregroundColor: .textDark
        )
        
        view.iconImageView?.isHidden = false
        view.iconImageView?.image = R.image.vpnErrorIcon()
        view.button?.isHidden = true

        SwiftMessages.show(config: config, view: view)
    }
    
    private func setupConstraints() {
        tableView.snp.makeConstraints {
            $0.top.bottom.equalTo(view.safeAreaLayoutGuide)
            $0.leading.trailing.equalToSuperview()
        }
        
        headerView.addSubview(headerLabel)
        headerView.addSubview(countView)
        countView.addSubview(countLabel)
        
        headerLabel.snp.makeConstraints {
            $0.leading.top.bottom.equalToSuperview().inset(16)
            $0.trailing.equalTo(countView.snp.leading)
        }
        
        countView.snp.makeConstraints {
            $0.width.height.equalTo(28)
            $0.centerY.equalToSuperview()
            $0.trailing.equalToSuperview().inset(16)
        }
        
        countLabel.snp.makeConstraints {
            $0.centerX.centerY.equalToSuperview()
        }
    }
    
    private func setupNavigationBar() {
        let image = R.image.mainTitleView()
        self.navigationItem.titleView = UIImageView(image: image)
        
        //TODO: - Дописать логику отображения картинки кнопки после запроса
        let notificationButton = UIButton()
        notificationButton.setImage(R.image.notifications(), for: .normal)
        notificationButton.addTarget(self, action: #selector(pressNotification), for: .touchUpInside)
        
        self.navigationItem.rightBarButtonItem = UIBarButtonItem(customView: notificationButton)
    }
    
    @objc private func pressNotification() {
        router?.routeTo(screen: .notifications)
    }
    
    private func configureTableView() {
        tableView.backgroundColor = .mainBackgroundColor
        tableView.delegate = self
        tableView.dataSource = self
        tableView.tableHeaderView = nil
        tableView.tableFooterView = UIView(frame: .zero)
        tableView.separatorStyle = .none
        tableView.showsVerticalScrollIndicator = false
    }
}

// MARK: - PromotionTableViewCell Delegate
extension MainDashboardViewController: PromotionTableViewCellDelegate {
    func routeToPromo(with model: StoriesModel) {
        router?.routeTo(screen: .stories(model: model))
    }
}

// MARK: - NewOrderTableViewCell Delegate
extension MainDashboardViewController: NewOrderTableViewCellDelegate {
    func routeToNewOrder() {
        print("Новый заказ")
    }
}

// MARK: - RegistrationOnTrustCell Delegate
extension MainDashboardViewController: RegistrationOnTrustCellDelegate {
    func routeToTrustArrangement() {
        router?.routeTo(screen: .trustArrangement)
    }
    
    func routeToQR() {
        router?.routeTo(screen: .qrCode(image: R.image.mocQR()!))
    }
}

// MARK: - RegistrationOnTrustCell Delegate
extension MainDashboardViewController: ActiveOrderTableViewCellDelegate {
    func routeToEstimate() {
        router?.routeTo(screen: .estimate)
    }
    
    func routeToTimeSlots() {
        router?.routeTo(screen: .timeSlots)
    }
    
    func routeToPay() {
        router?.routeTo(screen: .paymentMethod)
    }
    
    func rejectOrder() {
        //reload screen with status rejected
    }
    
    func routeToReciept() {
        router?.routeTo(screen: .pdfView(nameScreen: "№ 3478933045", url: "https://tvojkomp.ru/wp-content/uploads/2016/08/pdf-forma-dlya-zapolneniya.pdf?ysclid=ljsbp86xr5314059782"))
    }
    
    func routeToBarcode() {
        router?.routeTo(screen: .qrCode(image: R.image.mocStreakCode()!))
    }
    
    func routeToMap() {
        // open map
    }
}
