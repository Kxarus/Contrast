//
//  PaymentMethodViewController.swift
//  contrast
//
//  Created by Александра Орлова on 05.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PanModal

protocol PaymentMethodDisplayLogic: AnyObject {
    func display(viewModel: PaymentMethod.Model.ViewModel.ViewModelType)
}

final class PaymentMethodViewController: UIViewController {
    
    // MARK: - IBOutlets
    private let dragView: UIView = {
        let view = UIView()
        view.backgroundColor = .textLight
        view.layer.cornerRadius = 2.5
        return view
    }()
    
    private let tableView: UITableView = {
        let tableView = UITableView()
        tableView.separatorStyle = .none
        tableView.showsVerticalScrollIndicator = false
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.allowsSelection = false
        return tableView
    }()
    
    private let closeButton: MainButton = {
        let button = MainButton()
        button.setupStyle(style: .fill)
        button.setTitle(R.string.localizable.close(), for: .normal)
        return button
    }()
    
    // MARK: - External vars
    var interactor: PaymentMethodBusinessLogic?
    var router: (NSObjectProtocol & PaymentMethodRoutingLogic & PaymentMethodDataPassing)?
    
    // MARK: - Internal vars
    private var paymentModel = PaymentMethodModel(
        maxPointsNumber: 1600,
        sumWithoutPoints: 3900,
        finalSum: 3900,
        pointsBackPercent: 5,
        services: [AdditionalService(title: "Доп услуга 1", description: "Описание услуги 1", sum: 400, isSelected: false), AdditionalService(title: "Доп услуга 2", description: "Описание услуги 2", sum: 300, isSelected: false)],
        linkedCards: [CardModel(num: "Sber *4543", period: "08/28", cvc: "345"), CardModel(num: "Sber *4123", period: "07/26", cvc: "125"), CardModel(num: "Sber *4543", period: "08/28", cvc: "345")]
    )
    
    private var payPointsNumber = 0
    private var orderModel = NewOrderModel(number: "#123546", card: nil, sum: 0)
    private var originalViewHeight: CGFloat = 0.0
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        PaymentMethodConfigurator.shared.configure(self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        PaymentMethodConfigurator.shared.configure(self)
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        originalViewHeight = view.frame.height
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        if view.frame.height < originalViewHeight {
            originalViewHeight = view.frame.size.height
        }
        
        view.frame.size.height = originalViewHeight
    }
}

// MARK: - Display logic
extension PaymentMethodViewController: PaymentMethodDisplayLogic {
    
    func display(viewModel: PaymentMethod.Model.ViewModel.ViewModelType) {
        switch viewModel {
            //case .some
        }
    }
}

// MARK: - Private methods
private extension PaymentMethodViewController {
    private func setupView() {
        view.backgroundColor = UIColor.mainBackgroundColor
        setupDissmisKeyboard()
        setupTableView()
    }
    
    private func setupTableView() {
        tableView.delegate = self
        tableView.dataSource = self
        tableView.backgroundColor = R.color.mainBackgroundColor()
        tableView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: 65, right: 0)
        tableView.register(cellTypes: [AmountTableViewCell.self, AdditionalServicesTableViewCell.self, PaymentMethodTableViewCell.self])
        view.addSubview(tableView)
        view.addSubview(dragView)
        view.addSubview(closeButton)
        closeButton.addTarget(self, action: #selector(closeButtonTapped), for: .touchUpInside)
        
        setupConstraints()
    }
    
    private func setupConstraints() {
        dragView.snp.makeConstraints {
            $0.top.equalToSuperview().inset(8)
            $0.centerX.equalToSuperview()
            $0.width.equalTo(60)
            $0.height.equalTo(5)
        }
        
        tableView.snp.makeConstraints {
            $0.top.bottom.leading.trailing.equalToSuperview()
        }
        
        closeButton.snp.makeConstraints {
            $0.leading.trailing.equalToSuperview().inset(16)
            $0.bottom.equalToSuperview().inset(20)
            $0.height.equalTo(46)
        }
    }
    
    @objc private func closeButtonTapped() {
        router?.routeToMain()
    }
}

// MARK: - PaymentMethodTableViewCellDelegate
extension PaymentMethodViewController: PaymentMethodTableViewCellDelegate {
    func anotherCardsTapped() {
        guard let cards = paymentModel.linkedCards else { return }
        
        orderModel.sum = paymentModel.finalSum
        router?.routeToLinked(cards: cards, orderModel: orderModel)
    }
    
    func cashTapped() {
        router?.routeToMain()
    }
    
    func mainCardTapped() {
        orderModel.sum = paymentModel.finalSum
        
        guard let cards = paymentModel.linkedCards else {
            router?.routeToLinkNewCard(model: orderModel)
            return
        }
        
        orderModel.card = cards[0]
        router?.routeToPaymentConfirmation(model: orderModel)
    }
}

// MARK: - UITableViewDelegate, UITableViewDataSource
extension PaymentMethodViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch section {
        case 2:
            return paymentModel.services.count
        default:
            return 1
        }
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        3
    }
    
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        guard section != 2 else {
            return UIView()
        }
        
        let footerView = UIView()
        footerView.backgroundColor = UIColor.mainBackgroundColor
        
        let separatorView = UIView()
        separatorView.backgroundColor = UIColor.borderLight
        separatorView.translatesAutoresizingMaskIntoConstraints = false
        footerView.addSubview(separatorView)

        separatorView.snp.makeConstraints {
            $0.leading.trailing.equalToSuperview()
            $0.top.equalToSuperview().offset(25)
            $0.bottom.equalToSuperview().offset(-10)
            $0.height.equalTo(1)
        }
        
        return footerView
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.section {
        case 0:
            let cell = tableView.dequeueReusableCell(of: AmountTableViewCell.self)
            cell.setupCell(model: paymentModel, points: payPointsNumber)
            cell.delegate = self
            return cell
        case 1:
            let cell = tableView.dequeueReusableCell(of: PaymentMethodTableViewCell.self)
            cell.setupCell(cards: paymentModel.linkedCards)
            cell.delegate = self
            return cell
        case 2:
            let cell = tableView.dequeueReusableCell(of: AdditionalServicesTableViewCell.self)
            cell.setupCell(model: paymentModel.services[indexPath.row], number: indexPath.row)
            cell.delegate = self
            return cell
        default:
            return UITableViewCell()
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
       return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        200
    }
}

// MARK: - PaymentMethodTableViewCellDelegate
extension PaymentMethodViewController: PointsTextFieldDelegate {
    func getPoints(number: Int) {
        payPointsNumber = number
        paymentModel.finalSum = paymentModel.sumWithoutPoints - Float(number)
        tableView.reloadData()
    }
}

// MARK: - AdditionalServicesDelegate
extension PaymentMethodViewController: AdditionalServicesDelegate {
    func addService(sum: Float, serviceNumber: Int, serviceState: Bool) {
        paymentModel.sumWithoutPoints += sum
        paymentModel.finalSum += sum
        paymentModel.services[serviceNumber].isSelected = serviceState
        tableView.reloadData()
    }
}

// MARK: - Public methods
extension PaymentMethodViewController: PanModalPresentable {
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    
    var showDragIndicator: Bool {
        return false
    }
    
    var panScrollable: UIScrollView? {
        return tableView
    }
    
    var longFormHeight: PanModalHeight {
        return .maxHeight
    }
}
