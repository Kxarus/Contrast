//
//  OrderingInteractor.swift
//  contrast
//
//  Created by Kotovchikhin Vladimir on 14.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol OrderingBusinessLogic {
    func make(request: Ordering.Model.Request.RequestType)
}

protocol OrderingDataStore: AnyObject {
    //TODO: переделать проброс данных(будет не просто интервал с прошлого экрана)
    var selectedDate: String? { get set }
    var selectedTime: String? { get set }
    var addressData: UserAddressRequest? { get set }
    var isSaveAddress: Bool { get set }
}

final class OrderingInteractor {
    
    // MARK: - External vars
    var presenter: OrderingPresentationLogic?
    var worker: OrderingWorker?
    
    // MARK: - Internal vars
    private let service: Services
    var selectedDate: String?
    var selectedTime: String?
    var addressData: UserAddressRequest?
    var isSaveAddress = false
    
    init(service: NetworkServiceable) {
        self.service = Services(service: service)
    }
}

// MARK: - Business logic
extension OrderingInteractor: OrderingBusinessLogic {
    
    func make(request: Ordering.Model.Request.RequestType) {
        switch request {
        case .checkPromoCode(let code):
            checkPromoCode(code)
        case .saveUserAddress(let address):
            saveUserAddress(address)
        }
    }
}

// MARK: - Data store
extension OrderingInteractor: OrderingDataStore  {
    
}

// MARK: - Private methods
private extension OrderingInteractor {
    private func saveUserAddress(_ userAddress: UserAddressRequest) {
        service.performAddAddresses(userAddress) { result in
            switch result {
            case .success(let response):
                print("ответ по сохранению адреса")
                print(response)
            case .failure(let error):
                MessageService.showError(error)
            }
        }
    }
    
    private func checkPromoCode(_ code: String) {
        let items = fetchItemsInBusket()
        let request = OrderPromocodeRequest(items: items, promocode: code)
        service.performValidatePromocode(request) { [weak self] result in
            switch result {
            case .success(let response):
                print(response)
                self?.presenter?.presentData(response: .promocodeResponse(response, promocode: code))
            case .failure(let error):
                MessageService.showError(error)
                self?.presenter?.presentData(response: .promocodeResponse(nil, promocode: ""))
            }
        }
    }
    
    func fetchItemsInBusket() -> [PromocodeOrderItem] {
        let basket = LocalBasket.shared.getItemsFromBasket()
        var basketItems: [PromocodeOrderItem] = []
        
        let _ = basket.map { response in
            let additionalServices: [PromocodeAdditionalServices] = response.productVariant?.additionalServices.map {
                PromocodeAdditionalServices(id: $0.id, count: $0.count)
            } ?? []
            
            let item = PromocodeOrderItem(
                id: response.productVariant?.id ?? 0,
                count: response.productCount,
                additionalServices: additionalServices
            )
            
            basketItems.append(item)
        }
        
        return basketItems
    }
}
