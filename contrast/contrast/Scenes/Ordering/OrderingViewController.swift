//
//  OrderingViewController.swift
//  contrast
//
//  Created by Kotovchikhin Vladimir on 14.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com

import UIKit

protocol OrderingDisplayLogic: AnyObject {
    func display(viewModel: Ordering.Model.ViewModel.ViewModelType)
}

final class OrderingViewController: UIViewController {
    
    //MARK: - IBOutlets
    private var timeSlotSelectionView: ChangeView = {
        let view = ChangeView()
        view.setupView(sectionString: R.string.localizable.selectDeliveryTime(), screenType: .timeSlotSelection)
        view.setupChangeView(descriptionText: "", hideImage: true)
        return view
    }()
    
    private var addPhotosView: ChangeView = {
        let view = ChangeView()
        view.setupView(sectionString: R.string.localizable.addPhotosItems(), screenType: .addPhotos)
        return view
    }()
    
    private lazy var enterCode: MainTextField = {
        let view = MainTextField()
        view.setupView(typeView: .promocodeOrder, codeText: R.string.localizable.promocode(), placeHolder: R.string.localizable.promocode())
        return view
    }()
    
    private let verifyButton: MainButton = {
        let button = MainButton()
        button.setTitle(R.string.localizable.checkPromocode(), for: .normal)
        button.setupStyle(style: .border())
        button.isEnabledButton = false
        return button
    }()
    
    private let descriptionLabel: UILabel = {
        let label = UILabel()
        label.textAlignment = .center
        label.text = R.string.localizable.orderDiscount()
        label.font = GeneralFonts.generalRegular11
        label.textColor = .textLight
        label.isHidden = true
        return label
    }()

    private let confirmButton: MainButton = {
        let button = MainButton()
        button.setTitle(R.string.localizable.confirm(), for: .normal)
        button.isEnabledButton = true
        return button
    }()
    
    // MARK: - External vars
    weak var delegate: ChangeViewDelegate?
    var interactor: OrderingBusinessLogic?
    var router: (NSObjectProtocol & OrderingRoutingLogic & OrderingDataPassing)?
    
    // MARK: - Internal vars
    private var promoCodeText = ""
    private var timeIntervals = ""
    private var countPhotos = ""
    private var orderPhotosCount = [Int]()
    
    private var selectedDate = ""
    private var selectedTime = ""
    private var addressData: UserAddressRequest?
    private var isSaveAddress = false
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        OrderingConfigurator.shared.configure(self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        OrderingConfigurator.shared.configure(self)
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        UserDefaultsWorker.removeOrderPhotos()
        setupView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        if let fetchOrderPhotos = UserDefaultsWorker.fetchOrderPhotos() {
            let newPhotosCount = fetchOrderPhotos.count + orderPhotosCount.reduce(0, +)
            countPhotos = String(newPhotosCount)
            orderPhotosCount.append(fetchOrderPhotos.count)
            addPhotosView.setupChangeView(descriptionText: R.string.localizableStringDictRussian.photosCount(variablE: newPhotosCount), hideImage: false)
        }
    }
}

// MARK: - Display logic
extension OrderingViewController: OrderingDisplayLogic {
    
    func display(viewModel: Ordering.Model.ViewModel.ViewModelType) {
        switch viewModel {
        case .presentPromocodeStatus(let viewModel):
            if viewModel.isSuccessPromocode {
                DispatchQueue.main.asyncAfter(deadline: .now() + 1) { [weak self] in
                    self?.enterCode.toggleAnimation()
                    self?.enterCode.showView(image: R.image.access()!,
                                             text: "")
                    self?.updateDescriptionLabel(text: R.string.localizable.orderDiscount(),
                                                 isHidden: false,
                                                 textColor: R.color.textLight()!)
                }
            } else {
                DispatchQueue.main.asyncAfter(deadline: .now() + 1) { [weak self] in
                    self?.enterCode.toggleAnimation()
                    self?.enterCode.showView(image: R.image.fail()!,
                                             text: "")
                    self?.updateDescriptionLabel(text: R.string.localizable.codeNotCorrectly(),
                                                 isHidden: false,
                                                 textColor: R.color.delColor()!)
                }
            }
        }
    }
}

// MARK: - Private methods
private extension OrderingViewController {
    private func setupView() {
        view.backgroundColor = .mainBackgroundColor
        
        view.addSubview(timeSlotSelectionView)
        view.addSubview(addPhotosView)
        view.addSubview(enterCode)
        view.addSubview(verifyButton)
        view.addSubview(descriptionLabel)
        view.addSubview(confirmButton)
        
        fetchDataInDataStore()
        
        verifyButton.addTarget(self, action: #selector(verifyButtonTapped), for: .touchUpInside)
        confirmButton.addTarget(self, action: #selector(pressConfirmButton), for: .touchUpInside)
        
        enterCode.delegate = self
        timeSlotSelectionView.delegate = self
        addPhotosView.delegate = self
        setupConstraints()
    }
    
    private func fetchDataInDataStore() {
        selectedDate = router?.dataStore?.selectedDate ?? ""
        selectedTime = router?.dataStore?.selectedTime ?? ""
        addressData = router?.dataStore?.addressData
        isSaveAddress = router?.dataStore?.isSaveAddress ?? false
        
        let address = (addressData?.street ?? "") + " " + (addressData?.house ?? "")
        setupNavBar(withTitle: R.string.localizable.address(), and: address, dismiss: false)
        
        let descriptionText = selectedDate + " c " + selectedTime
        timeSlotSelectionView.setupChangeView(descriptionText: descriptionText, hideImage: true)
    }
    
    private func setupConstraints() {
        
        timeSlotSelectionView.snp.makeConstraints({
            $0.top.equalTo(view.safeAreaLayoutGuide).inset(27)
            $0.leading.trailing.equalToSuperview().inset(16)
        })
        
        addPhotosView.snp.makeConstraints({
            $0.top.equalTo(timeSlotSelectionView.snp.bottom).offset(18)
            $0.leading.trailing.equalToSuperview().inset(16)
        })
        
        enterCode.snp.makeConstraints( {
            $0.top.equalTo(addPhotosView.snp.bottom).offset(20)
            $0.leading.trailing.equalToSuperview().inset(16)
            $0.height.equalTo(50)
        })
        
        verifyButton.snp.makeConstraints ({
            $0.top.equalTo(enterCode.snp.bottom).offset(22)
            $0.leading.trailing.equalToSuperview().inset(16)
            $0.height.equalTo(46)
        })
        
        descriptionLabel.snp.makeConstraints ({
            $0.top.equalTo(verifyButton.snp.bottom).offset(14)
            $0.leading.trailing.equalToSuperview().inset(16)
        })
        
        confirmButton.snp.makeConstraints({
            $0.leading.trailing.equalToSuperview().inset(17)
            $0.bottom.equalTo(view.safeAreaLayoutGuide)
            $0.height.equalTo(46)
        })
    }
    
    private func updateDescriptionLabel(text: String, isHidden: Bool, textColor: UIColor) {
        descriptionLabel.text = text
        descriptionLabel.isHidden = isHidden
        descriptionLabel.textColor = textColor
    }
    
    @objc private func pressConfirmButton() {
        if isSaveAddress {
            if let addressData = addressData {
                interactor?.make(request: .saveUserAddress(addressData))
            }
        }
        router?.routeToSuccess(selectedDate, selectedTime)
    }
    
    @objc private func verifyButtonTapped() {
        self.enterCode.toggleAnimation()
        interactor?.make(request: .checkPromoCode(promoCodeText))
    }
}

// MARK: - TypeStackViewDelegate
extension OrderingViewController: ChangeViewDelegate {
    func routeTo(type: ScreenType) {
        switch type {
        case .timeSlotSelection:
            break
//            timeIntervals = "6"
//            timeSlotSelectionView.setupChangeView(descriptionText: timeIntervals)
        case .addPhotos:
            let vc = addPhotosInOrderingViewController()
            navigationController?.pushViewController(vc, animated: true)
        default:
            break
        }
    }
}

// MARK: - PromoCodeViewDelegate
extension OrderingViewController: MainTextFieldDelegate {
    func getTextField(text: String, type: ViewType) {
        let currentInputCount = promoCodeText.count
        switch type {
        case .promocodeOrder:
            promoCodeText = text
            if ((currentInputCount - 1) != 0) {
                descriptionLabel.isHidden = true
            }
            
            if text.isEmpty {
                verifyButton.isEnabledButton = false
            } else {
                verifyButton.isEnabledButton = true
            }
        default:
            break
        }
    }
}
