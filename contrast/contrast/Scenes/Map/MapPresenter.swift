//
//  MapPresenter.swift
//  contrast
//
//  Created by Roman Kiruxin on 15.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import YandexMapsMobile

protocol MapPresentationLogic {
    func presentData(response: Map.Model.Response.ResponseType)
}

final class MapPresenter {
    
    // MARK: - External vars
    weak var viewController: MapDisplayLogic?
    
}

// MARK: - Presentation logic
extension MapPresenter: MapPresentationLogic {
    
    func presentData(response: Map.Model.Response.ResponseType) {
        switch response {
        case .zonesCheck(let response, let lat, let lon):
            zonesCheck(response, lat, lon)
        case .zonesAll(let response):
            zonesAll(response)
        case .userAddresses(let response):
            getUserAddresses(response)
        case .zonesGeolocate(let response):
            zonesGeolocate(response)
        }
    }
}

//  MARK: - Private  methods
private extension MapPresenter {
    private func zonesGeolocate(_ response: [ZonesGeolocateResponse]) {
        var viewModel: [ZonesGeolocateInfo] = []
        
        let _ = response.map { resp in
            
            var timeIntervals: [TimeIntervalModel] = []
            
            _ = resp.intervals.map({ model in
                var intervals: [IntervalModel] = []
                _ = model.time.map({ interval in
                    let intervalTimeStarts = interval.from?.convertToDateWithFormats()
                    let intervalTimeFinish = interval.to?.convertToDateWithFormats()
                    
                    let item = IntervalModel(id: 0,
                                             timeStarts: intervalTimeStarts?.convertToString(format: "HH:mm") ?? "",
                                             timeFinish: intervalTimeFinish?.convertToString(format: "HH:mm") ?? "",
                                             isActive: false)
                    
                    intervals.append(item)
                })
                let date = model.date?.convertToDateWithFormats()
                let item = TimeIntervalModel(day: date?.convertToString(format: "dd") ?? "",
                                             month: date?.convertToString(format: "MMMM") ?? "",
                                             intervals: intervals,
                                             isActive: false)
                
                timeIntervals.append(item)
            })
            
            
            
            let item = ZonesGeolocateInfo(id: resp.id ?? 0,
                                          intervals: timeIntervals,
                                          isExpress: resp.isExpress ?? false,
                                          deliveryPrice: resp.deliveryPrice ?? 0,
                                          minOrderSum: resp.minOrderSum ?? 0)
            
            viewModel.append(item)
        }
        
        viewController?.display(viewModel: .presentGeolocate(viewModel))
    }
    
    private func getUserAddresses(_ response: [UserAddressResponse]) {
        var viewModel: [UserAddressModel] = []
        
        let _ = response.map { resp in
            let item = UserAddressModel(id: resp.id ?? 0,
                                        city: resp.city ?? "",
                                        street: resp.street ?? "",
                                        house: resp.house ?? "",
                                        latitude: resp.latitude ?? 0.0,
                                        longitude: resp.longitude ?? 0.0,
                                        type: resp.type ?? 0,
                                        comment: resp.comment ?? "",
                                        intercom: resp.intercom ?? "",
                                        entrance: resp.entrance ?? "",
                                        floor: resp.floor ?? "",
                                        flat: resp.flat ?? "",
                                        isActive: false)
            viewModel.append(item)
        }
        viewController?.display(viewModel: .presentUserAddresses(viewModel))
    }
    
    private func zonesAll(_ response: [ZonesAllResponse]) {
        var viewModel: [ZonesAllModel] = []
        
        let _ = response.map { resp in
            var points: [YMKPoint] = []
            
            for i in 0..<resp.coordinates.count {
                if i % 2 == 0 {
                    let latitude = resp.coordinates[i]
                    let longitude = resp.coordinates[i+1]
                    
                    let ymkPoint = YMKPoint(latitude: latitude ?? 0, longitude: longitude ?? 0)
                    points.append(ymkPoint)
                }
            }
            
            let item = ZonesAllModel(id: resp.id ?? 0,
                                     name: resp.name ?? "-",
                                     coordinates: points)
            
            viewModel.append(item)
        }
        
        viewController?.display(viewModel: .presentAllZones(viewModel))
    }
    
    private func zonesCheck(_ response: ZonesCheckResponse,_ lat: Double,_ lon: Double) {
        if response.isInZone {
            let address = AddressDataModel(city: response.address?.city ?? "",
                                           street: response.address?.street ?? "",
                                           house: response.address?.house ?? "",
                                           latitude: response.address?.latitude ?? 0,
                                           longitude: response.address?.longitude ?? 0,
                                           address: response.address?.address ?? "")
            
            let viewModel = ZonesCheckModel(address: address, isInZone: true)
            viewController?.display(viewModel: .presentZonesCheck(viewModel, lat, lon))
        } else {
            let viewModel = ZonesCheckModel(address: nil, isInZone: false)
            viewController?.display(viewModel: .presentZonesCheck(viewModel))
        }
    }
}
