//
//  MapInteractor.swift
//  contrast
//
//  Created by Roman Kiruxin on 15.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MapBusinessLogic {
    func make(request: Map.Model.Request.RequestType)
}

protocol MapDataStore: AnyObject {
    
}

final class MapInteractor {
    
    // MARK: - External vars
    var presenter: MapPresentationLogic?
    var worker: MapWorker?
    
    // MARK: - Internal vars
    private let service: Services
    
    init(service: NetworkServiceable) {
        self.service = Services(service: service)
    }
}

// MARK: - Business logic
extension MapInteractor: MapBusinessLogic {
    
    func make(request: Map.Model.Request.RequestType) {
        switch request {
        case .zonesCheck(let lat, let lon):
            zonesCheck(lat: lat, lon: lon)
        case .zonesGeolocate(let lat, let lon):
            zonesGeolocate(lat: lat, lon: lon)
        case .zonesAll:
            zonesAll()
        case .fetchUserAddresses:
            fetchUserAddresses()
        }
    }
}

// MARK: - Data store
extension MapInteractor: MapDataStore  {
   
}

// MARK: - Private methods
private extension MapInteractor {
    private func zonesCheck(lat: Double, lon: Double) {
        let request = CoordinateRequest(lat: lat, lon: lon)
        service.performZonesCheck(request) { result in
            switch result {
            case .success(let response):
                print(response)
                self.presenter?.presentData(response: .zonesCheck(response, lat, lon))
            case .failure(let error):
                MessageService.showError(error)
            }
        }
    }
    
    private func zonesGeolocate(lat: Double, lon: Double) {
        let request = CoordinateRequest(lat: lat, lon: lon)
        service.performZonesGeolocate(request) { result in
            switch result {
            case .success(let response):
                print(response)
                
                let intervals = [TimeIntervalResponse(date: "2023-03-05", time: [IntervalResponse(from: "10:00",
                                                                                                 to: "12:00"),
                                                                                     IntervalResponse(from: "12:00",
                                                                                                      to: "14:00"),
                                                                                     IntervalResponse(from: "14:00",
                                                                                                      to: "16:00"),
                                                                                     IntervalResponse(from: "16:00",
                                                                                                      to: "18:00")]),
                                TimeIntervalResponse(date: "2023-03-06", time: [IntervalResponse(from: "10:00",
                                                                                                      to: "12:00"),
                                                                                     IntervalResponse(from: "12:00",
                                                                                                      to: "14:00"),
                                                                                     IntervalResponse(from: "16:00",
                                                                                                      to: "18:00")]),
                                TimeIntervalResponse(date: "2023-03-07", time: [IntervalResponse(from: "10:00",
                                                                                                      to: "12:00"),
                                                                                     IntervalResponse(from: "12:00",
                                                                                                      to: "14:00"),
                                                                                     IntervalResponse(from: "14:00",
                                                                                                      to: "16:00")]),
                                TimeIntervalResponse(date: "2023-03-08", time: [IntervalResponse(from: "10:00",
                                                                                                      to: "12:00"),
                                                                                     IntervalResponse(from: "12:00",
                                                                                                      to: "14:00"),
                                                                                     IntervalResponse(from: "14:00",
                                                                                                      to: "16:00"),
                                                                                     IntervalResponse(from: "16:00",
                                                                                                      to: "18:00")])]
                
                let mocResponse = [ZonesGeolocateResponse(id: 1,
                                                          intervals: intervals,
                                                          isExpress: false,
                                                          deliveryPrice: 433,
                                                          minOrderSum: 1500),
                                   ZonesGeolocateResponse(id: 2,
                                                         intervals: intervals,
                                                         isExpress: true,
                                                         deliveryPrice: 433,
                                                         minOrderSum: 1800)]
                
                self.presenter?.presentData(response: .zonesGeolocate(mocResponse))
//                self.presenter?.presentData(response: .zonesGeolocate(response))
            case .failure(let error):
                MessageService.showError(error)
            }
        }
    }
    
    private func zonesAll() {
        service.performZonesAll { result in
            switch result {
            case .success(let response):
                print(response)
                self.presenter?.presentData(response: .zonesAll(response))
            case .failure(let error):
                MessageService.showError(error)
            }
        }
    }
    
    private func fetchUserAddresses() {
        service.performUserAddresses { result in
            switch result {
            case .success(let response):
                print(response)
                print("7878788787878787878787")
                self.presenter?.presentData(response: .userAddresses(response))
            case .failure(let error):
                MessageService.showError(error)
            }
        }
    }
}
