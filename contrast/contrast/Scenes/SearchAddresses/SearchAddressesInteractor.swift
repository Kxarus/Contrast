//
//  SearchAddressesInteractor.swift
//  contrast
//
//  Created by Roman Kiruxin on 18.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchAddressesBusinessLogic {
    func make(request: SearchAddresses.Model.Request.RequestType)
}

protocol SearchAddressesDataStore: AnyObject {
    
}

final class SearchAddressesInteractor {
    
    // MARK: - External vars
    var presenter: SearchAddressesPresentationLogic?
    var worker: SearchAddressesWorker?
    
    // MARK: - Internal vars
    private let service: Services
    
    init(service: NetworkServiceable) {
        self.service = Services(service: service)
    }
}

// MARK: - Business logic
extension SearchAddressesInteractor: SearchAddressesBusinessLogic {
    
    func make(request: SearchAddresses.Model.Request.RequestType) {
        switch request {
        case .fetchAdresses(let address):
            fetchAddress(address)
        }
    }
}

// MARK: - Data store
extension SearchAddressesInteractor: SearchAddressesDataStore  {
   
}

// MARK: - Private methods
private extension SearchAddressesInteractor {
    private func fetchAddress(_ address: String) {
        let request = AddressesSuggestRequest(address: address)
        service.performAddressesSuggest(request) { result in
            switch result {
            case .success(let response):
                print(response)
                self.presenter?.presentData(response: .addresses(response))
            case .failure(let error):
                MessageService.showError(error)
            }
        }
    }
}
