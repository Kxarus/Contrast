//
//  SearchAddressesViewController.swift
//  contrast
//
//  Created by Roman Kiruxin on 18.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PanModal

protocol SearchAddressesDisplayLogic: AnyObject {
    func display(viewModel: SearchAddresses.Model.ViewModel.ViewModelType)
}

final class SearchAddressesViewController: UIViewController {
    
    // MARK: - IBOutlets
    private let dragView: UIView = {
        let view = UIView()
        view.backgroundColor = .textLight
        view.layer.cornerRadius = 2.5
        return view
    }()
    
    private let searchTextField: RightPaddingTextField = {
        let textField = RightPaddingTextField()
        textField.backgroundColor = .secondaryButtonColor
        textField.textColor = .textDark
        textField.layer.borderColor = UIColor.borderLight.cgColor
        textField.layer.borderWidth = 1
        textField.placeholder = R.string.localizable.inputAddress()
        textField.layer.cornerRadius = 20
        return textField
    }()
    
    private let searchImageView: UIImageView = {
        let image = UIImageView()
        image.image = R.image.searchIcon()
        return image
    }()
    
    private let deleteTextButton: UIButton = {
        let button = UIButton()
        button.setImage(R.image.clearIcon(), for: .normal)
        button.isHidden = true
        return button
    }()
    
    private let tableView: UITableView = {
        let tableView = UITableView(frame: .zero, style: .grouped)
        tableView.register(cellTypes: [AddressCell.self])
        return tableView
    }()
    
    private let mainButton: MainButton = {
        let button = MainButton()
        button.setTitle(R.string.localizable.close(), for: .normal)
        return button
    }()
    
    // MARK: - External vars
    var interactor: SearchAddressesBusinessLogic?
    var router: (NSObjectProtocol & SearchAddressesRoutingLogic & SearchAddressesDataPassing)?
    
    // MARK: - Internal vars
    private var addresses: [AddressDataModel] = []
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        SearchAddressesConfigurator.shared.configure(self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        SearchAddressesConfigurator.shared.configure(self)
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
}

// MARK: - Display logic
extension SearchAddressesViewController: SearchAddressesDisplayLogic {
    
    func display(viewModel: SearchAddresses.Model.ViewModel.ViewModelType) {
        switch viewModel {
        case .presentAddresses(let viewModel):
            addresses = viewModel
            tableView.reloadData()
        }
    }
}

//MARK: - PanModalPresentable
extension SearchAddressesViewController: PanModalPresentable {
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    
    var showDragIndicator: Bool {
        return false
    }
    
    var panScrollable: UIScrollView? {
        return nil
    }
    
    var longFormHeight: PanModalHeight {
        return .intrinsicHeight
    }
}

// MARK: - TableView Data Sourse
extension SearchAddressesViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return addresses.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let row = indexPath.row
        
        let cell = tableView.dequeueReusableCell(of: AddressCell.self)
        cell.selectionStyle = .none
        cell.setupCell(address: addresses[row].address)
    
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
}

// MARK: - TableView Delegate
extension SearchAddressesViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        UserDefaultsWorker.saveActiveSearchAddress(addresses[indexPath.row])
        dismiss(animated: true)
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return CGFloat.leastNormalMagnitude
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        return UIView(frame: .zero)
    }
    
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        return UIView(frame: .zero)
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return CGFloat.leastNormalMagnitude
    }
}

//MARK: - UITextFieldDelegate
extension SearchAddressesViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
}

// MARK: - Private methods
private extension SearchAddressesViewController {
    private func setupView() {
        view.backgroundColor = .mainBackgroundColor
        
        view.addSubview(dragView)
        view.addSubview(searchTextField)
        searchTextField.addSubview(searchImageView)
        searchTextField.addSubview(deleteTextButton)
        
        view.addSubview(tableView)
        view.addSubview(mainButton)
        
        searchTextField.delegate = self
        searchTextField.addTarget(self, action: #selector(textChanged), for: .editingChanged)
        setupDissmisKeyboard()
        
        deleteTextButton.addTarget(self, action: #selector(pressDeleteTextButton), for: .touchUpInside)
        mainButton.addTarget(self, action: #selector(pressMainButton), for: .touchUpInside)
        
        configureTableView()
        setupConstraints()
    }
    
    private func configureTableView() {
        tableView.backgroundColor = .mainBackgroundColor
        tableView.delegate = self
        tableView.dataSource = self
        tableView.tableHeaderView = nil
        tableView.tableFooterView = UIView(frame: .zero)
        tableView.separatorStyle = .none
        tableView.showsVerticalScrollIndicator = false
    }
    
    private func setupConstraints() {
        dragView.snp.makeConstraints {
            $0.top.equalToSuperview().inset(8)
            $0.centerX.equalToSuperview()
            $0.width.equalTo(60)
            $0.height.equalTo(5)
        }
        
        searchTextField.snp.makeConstraints {
            $0.top.equalTo(dragView.snp.bottom).offset(27)
            $0.leading.trailing.equalToSuperview().inset(16)
            $0.height.equalTo(45)
        }
        
        searchImageView.snp.makeConstraints {
            $0.centerY.equalTo(searchTextField)
            $0.leading.equalTo(searchTextField).inset(12)
            $0.width.height.equalTo(16)
        }
        
        deleteTextButton.snp.makeConstraints {
            $0.centerY.equalTo(searchTextField)
            $0.trailing.equalTo(searchTextField).inset(12)
            $0.width.height.equalTo(24)
        }
        
        tableView.snp.makeConstraints {
            $0.top.equalTo(searchTextField.snp.bottom).offset(21)
            $0.leading.trailing.equalToSuperview()
            $0.height.equalTo(200)
        }
        
        mainButton.snp.makeConstraints {
            $0.top.equalTo(tableView.snp.bottom).offset(200)
            $0.bottom.equalTo(view.safeAreaLayoutGuide).inset(15)
            $0.leading.trailing.equalToSuperview().inset(16)
            $0.height.equalTo(46)
        }
    }
    
    @objc private func textChanged(_ textField: UITextField) {
        guard let text = textField.text else { return }
        searchTextField.text = text
        
        if !text.isEmpty {
            deleteTextButton.isHidden = false
        } else {
            deleteTextButton.isHidden = true
        }
        
        interactor?.make(request: .fetchAdresses(text))
    }
    
    @objc private func pressDeleteTextButton() {
        searchTextField.text = ""
        deleteTextButton.isHidden = true
    }
    
    @objc private func pressMainButton() {
        dismiss(animated: true)
    }
}

// MARK: - Public methods
extension SearchAddressesViewController {
    
}


