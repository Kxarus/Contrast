//
//  ReferalInteractor.swift
//  contrast
//
//  Created by Vladimir Kotovchikhin on 29.06.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ReferalBusinessLogic {
    func make(request: Referal.Model.Request.RequestType)
}

protocol ReferalDataStore: AnyObject {
    
}

final class ReferalInteractor {
    
    // MARK: - External vars
    var presenter: ReferalPresentationLogic?
    var worker: ReferalWorker?
    
    // MARK: - Internal vars
    private let service: Services

    
    init(service: NetworkServiceable) {
        self.service = Services(service: service)
    }
}

// MARK: - Business logic
extension ReferalInteractor: ReferalBusinessLogic {
    
    func make(request: Referal.Model.Request.RequestType) {
        switch request {
        case .postInvitedCode(let code):
            let request = ClientInvitedRequest(code: code)
            service.performClientInvited(request) { [weak self] result in
                switch result {
                case .success(let response):
                    self?.presenter?.presentData(response: .referalCodeStatus(true))
                case .failure(let error):
                    MessageService.showError(error)
                    self?.presenter?.presentData(response: .referalCodeStatus(false))
                }
            }
        }
    }
}

// MARK: - Data store
extension ReferalInteractor: ReferalDataStore  {
   
}

// MARK: - Private methods
private extension ReferalInteractor {
    
}
