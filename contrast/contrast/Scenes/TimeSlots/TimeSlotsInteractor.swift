//
//  TimeSlotsInteractor.swift
//  contrast
//
//  Created by Roman Kiruxin on 05.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TimeSlotsBusinessLogic {
    func make(request: TimeSlots.Model.Request.RequestType)
}

protocol TimeSlotsDataStore: AnyObject {
    
}

final class TimeSlotsInteractor {
    
    // MARK: - External vars
    var presenter: TimeSlotsPresentationLogic?
    var worker: TimeSlotsWorker?
    
    // MARK: - Internal vars
    private let service: Services
    
    init(service: NetworkServiceable) {
        self.service = Services(service: service)
    }
}

// MARK: - Business logic
extension TimeSlotsInteractor: TimeSlotsBusinessLogic {
    
    func make(request: TimeSlots.Model.Request.RequestType) {
        switch request {
        case .fetchIntervals:
            fetchIntervals()
        }
    }
}

// MARK: - Data store
extension TimeSlotsInteractor: TimeSlotsDataStore  {
   
}

// MARK: - Private methods
private extension TimeSlotsInteractor {
    private func fetchIntervals() {
//        let request = TimeIntervalRequest(zoneId: UserDefaultsWorker.fetchActiveZoneId()!)
//        service.performTimeIntervals(request) { [weak self] result in
//            switch result {
//            case .success(let response):
//                self!.presenter?.presentData(response: .fetchedIntervals(response))
//            case .failure(let error):
//                MessageService.showError(error)
//            }
//        }
        let response = [TimeIntervalResponse(date: "2023-03-05", time: [IntervalResponse(from: "10:00",
                                                                                         to: "12:00"),
                                                                             IntervalResponse(from: "12:00",
                                                                                              to: "14:00"),
                                                                             IntervalResponse(from: "14:00",
                                                                                              to: "16:00"),
                                                                             IntervalResponse(from: "16:00",
                                                                                              to: "18:00")]),
                        TimeIntervalResponse(date: "2023-03-06", time: [IntervalResponse(from: "10:00",
                                                                                              to: "12:00"),
                                                                             IntervalResponse(from: "12:00",
                                                                                              to: "14:00"),
                                                                             IntervalResponse(from: "16:00",
                                                                                              to: "18:00")]),
                        TimeIntervalResponse(date: "2023-03-07", time: [IntervalResponse(from: "10:00",
                                                                                              to: "12:00"),
                                                                             IntervalResponse(from: "12:00",
                                                                                              to: "14:00"),
                                                                             IntervalResponse(from: "14:00",
                                                                                              to: "16:00")]),
                        TimeIntervalResponse(date: "2023-03-08", time: [IntervalResponse(from: "10:00",
                                                                                              to: "12:00"),
                                                                             IntervalResponse(from: "12:00",
                                                                                              to: "14:00"),
                                                                             IntervalResponse(from: "14:00",
                                                                                              to: "16:00"),
                                                                             IntervalResponse(from: "16:00",
                                                                                              to: "18:00")])]
        presenter?.presentData(response: .fetchedIntervals(response))
    }
}
