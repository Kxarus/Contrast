//
//  TimeSlotsPresenter.swift
//  contrast
//
//  Created by Roman Kiruxin on 05.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TimeSlotsPresentationLogic {
    func presentData(response: TimeSlots.Model.Response.ResponseType)
}

final class TimeSlotsPresenter {
    
    // MARK: - External vars
    weak var viewController: TimeSlotsDisplayLogic?
    
}

// MARK: - Presentation logic
extension TimeSlotsPresenter: TimeSlotsPresentationLogic {
    
    func presentData(response: TimeSlots.Model.Response.ResponseType) {
        switch response {
        case .fetchedIntervals(let response):
            var timeIntervals: [TimeIntervalModel] = []
            
            _ = response.map({ model in
                var intervals: [IntervalModel] = []
                _ = model.time.map({ interval in
                    let intervalTimeStarts = interval.from?.convertToDateWithFormats()
                    let intervalTimeFinish = interval.to?.convertToDateWithFormats()
                    
                    let item = IntervalModel(id: 0,
                                             timeStarts: intervalTimeStarts?.convertToString(format: "HH:mm") ?? "",
                                             timeFinish: intervalTimeFinish?.convertToString(format: "HH:mm") ?? "",
                                             isActive: false)
                    
                    intervals.append(item)
                })
                let date = model.date?.convertToDateWithFormats()
                let item = TimeIntervalModel(day: date?.convertToString(format: "dd") ?? "",
                                             month: date?.convertToString(format: "MMMM") ?? "",
                                             intervals: intervals,
                                             isActive: false)
                
                timeIntervals.append(item)
            })
            
            viewController?.display(viewModel: .intervals(timeIntervals))
        }
    }
}

//  MARK: - Private  methods
private extension TimeSlotsPresenter {
    
}
