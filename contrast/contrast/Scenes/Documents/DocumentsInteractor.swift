//
//  DocumentsInteractor.swift
//  contrast
//
//  Created by Roman Kiruxin on 05.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DocumentsBusinessLogic {
    func make(request: Documents.Model.Request.RequestType)
}

protocol DocumentsDataStore: AnyObject {
    var nameScreen: String? { get set }
    var receiptUrl: String? { get set }
}

final class DocumentsInteractor {
    
    // MARK: - External vars
    var presenter: DocumentsPresentationLogic?
    var worker: DocumentsWorker?
    
    // MARK: - Internal vars
    private let service: Services
    var nameScreen: String?
    var receiptUrl: String?
    
    init(service: NetworkServiceable) {
        self.service = Services(service: service)
    }
}

// MARK: - Business logic
extension DocumentsInteractor: DocumentsBusinessLogic {
    
    func make(request: Documents.Model.Request.RequestType) {
        switch request {
        case .fetchNameScreen:
            fetchNameScreen()
        case .fetchUrlReceipt:
            fetchUrlReceipt()
        }
    }
}

// MARK: - Data store
extension DocumentsInteractor: DocumentsDataStore  {
   
}

// MARK: - Private methods
private extension DocumentsInteractor {
    private func fetchNameScreen() {
        guard let nameScreen = nameScreen else {
            return
        }
        presenter?.presentData(response: .nameScreen(nameScreen))
    }
    
    private func fetchUrlReceipt() {
        guard let url = receiptUrl else {
            return
        }
        presenter?.presentData(response: .urlReceipt(url))
    }
}
