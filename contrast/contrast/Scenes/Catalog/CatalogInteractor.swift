//
//  CatalogInteractor.swift
//  contrast
//
//  Created by Roman Kiruxin on 29.06.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CatalogBusinessLogic {
    func make(request: Catalog.Model.Request.RequestType)
}

protocol CatalogDataStore: AnyObject {
    
}

final class CatalogInteractor {
    
    // MARK: - External vars
    var presenter: CatalogPresentationLogic?
    var worker: CatalogWorker?
    
    // MARK: - Internal vars
    private let service: Services
    
    init(service: NetworkServiceable) {
        self.service = Services(service: service)
    }
}

// MARK: - Business logic
extension CatalogInteractor: CatalogBusinessLogic {
    
    func make(request: Catalog.Model.Request.RequestType) {
        switch request {
        case .fetchCatalog:
            fetchCatalog()
        case .fetchFavourites:
            fetchFavourites()
        case .addFavourites(let id):
            addFavourites(id)
        case .removeFavourites(let id):
            removeFavourites(id)
        case .getFavourites(let ids, let catalog):
            presenter?.presentData(response: .favourites(ids, catalog))
        case .fetchCatalogWithFavorites(let catalog, let ids):
            presenter?.presentData(response: .catalogWithFavorites(catalog, ids))
        }
    }
}

// MARK: - Data store
extension CatalogInteractor: CatalogDataStore  {
    
}

// MARK: - Private methods
private extension CatalogInteractor {
    private func addFavourites(_ id: Int) {
        let request = FavouritesRequest(id: id)
        service.performAddFavourites(request) { result in
            switch result {
            case .success(let response):
                print(response)
            case .failure(let error):
                MessageService.showError(error)
            }
        }
    }
    
    private func removeFavourites(_ id: Int) {
        let request = FavouritesRequest(id: id)
        service.performRemoveFavourites(request) { result in
            switch result {
            case .success(let response):
                print(response)
            case .failure(let error):
                MessageService.showError(error)
            }
        }
    }
    
    private func fetchFavourites() {
        service.performFavourites { [weak self] result in
            switch result {
            case .success(let response):
                print(response)
                self?.presenter?.presentData(response: .favouritesIds(response))
            case .failure(let error):
                self?.presenter?.presentData(response: .favouritesIds([]))
                MessageService.showError(error)
            }
        }
    }
    
    private func fetchCatalog() {
        service.performCatalog { [weak self] result in
            switch result {
            case .success(let response):
                print(response)
                self?.presenter?.presentData(response: .catalog(response))
            case .failure(let error):
                MessageService.showError(error)
            }
        }
    }
    
}
