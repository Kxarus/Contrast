//
//  CatalogPresenter.swift
//  contrast
//
//  Created by Roman Kiruxin on 29.06.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CatalogPresentationLogic {
    func presentData(response: Catalog.Model.Response.ResponseType)
}

final class CatalogPresenter {
    
    // MARK: - External vars
    weak var viewController: CatalogDisplayLogic?
    
}

// MARK: - Presentation logic
extension CatalogPresenter: CatalogPresentationLogic {
    
    func presentData(response: Catalog.Model.Response.ResponseType) {
        switch response {
        case .catalog(let response):
            presentCatalog(response)
        case .favouritesIds(let response):
            viewController?.display(viewModel: .presentFavouritesIds(response))
        case .favourites(let ids, let catalog):
            var viewModel: [CatalogItemModel] = []
            //TODO: - Потом переделать
            let _ = ids.map { id in
                let _ = catalog.map { category in
                    let _ = category.items.map { item in
                        if item.id == id {
                            viewModel.append(item)
                        }
                    }
                }
            }

            viewController?.display(viewModel: .presentFavourites(viewModel))
        case .catalogWithFavorites(let catalog, let ids):
            catalogWithFavorites(catalog, ids)
        }
    }
}

//  MARK: - Private  methods
private extension CatalogPresenter {
    private func catalogWithFavorites(_ catalog: [CategoryModel],_ ids: [Int]) {
        //TODO: - переделать
        var newCatalog = catalog
        
        let _ = ids.map { id in
            for index in 0..<newCatalog.count {
                for i in 0..<newCatalog[index].items.count {
                    if newCatalog[index].items[i].id == id {
                        newCatalog[index].items[i].isFavorite = true
                    }
                }
            }
        }
        viewController?.display(viewModel: .presentCatalogWithFavorites(newCatalog))
    }
    
    private func presentCatalog(_ response: [CatalogResponse]) {
        var categoryModels: [CategoryModel] = []
        
        for catalogResponse in response {
            var catalogItemModels: [CatalogItemModel] = []
            
            for catalogItemResponse in catalogResponse.items {
                var additionalServiceModels: [AditionalServiceModel] = []
                
                for additionalServiceResponse in catalogItemResponse!.additionalServices {
                    let additionalServiceModel = AditionalServiceModel(id: additionalServiceResponse?.id ?? 0,
                                                                       title: additionalServiceResponse?.title ?? "",
                                                                       price: additionalServiceResponse?.price ?? 0,
                                                                       description: additionalServiceResponse?.description ?? "",
                                                                       count: 0)
                    additionalServiceModels.append(additionalServiceModel)
                }
                
                let catalogItemModel = CatalogItemModel(id: catalogItemResponse?.id ?? 0,
                                                        title: catalogItemResponse?.title ?? "",
                                                        description: catalogItemResponse?.description ?? "",
                                                        price: catalogItemResponse?.price ?? 0,
                                                        additionalDescription: catalogItemResponse?.additionalDescription ?? "",
                                                        additionalServices: additionalServiceModels,
                                                        isExpressAvailable: catalogItemResponse?.isExpressAvailable ?? false,
                                                        isFavorite: false)
                catalogItemModels.append(catalogItemModel)
            }
            
            let categoryModel = CategoryModel(id: catalogResponse.id ?? 0,
                                            title: catalogResponse.title ?? "",
                                            items: catalogItemModels,
                                            imageUrl: catalogResponse.imageUrl ?? "")
            categoryModels.append(categoryModel)
        }
        viewController?.display(viewModel: .catalog(categoryModels))
    }
}
