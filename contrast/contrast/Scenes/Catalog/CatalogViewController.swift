//
//  CatalogViewController.swift
//  contrast
//
//  Created by Roman Kiruxin on 29.06.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit

protocol CatalogDisplayLogic: AnyObject {
    func display(viewModel: Catalog.Model.ViewModel.ViewModelType)
}

protocol CatalogViewControllerDelegate: AnyObject {
    func routeToAuth()
}

final class CatalogViewController: UIViewController {
    
    // MARK: - IBOutlets
    private let tableView: UITableView = {
        let tableView = UITableView(frame: .zero, style: .grouped)
        tableView.register(cellTypes: [ServiceTableViewCell.self])
        return tableView
    }()
    
    private let catalogCategories: CategoriesView = {
        let catalog = CategoriesView()
        return catalog
    }()
    
    private let orderCalc: OrderValueView = {
        let view = OrderValueView()
        return view
    }()
    
    private let searchTextField: RightPaddingTextField = {
        let textField = RightPaddingTextField()
        textField.backgroundColor = .secondaryButtonColor
        textField.textColor = .textDark
        textField.layer.borderColor = UIColor.borderLight.cgColor
        textField.layer.borderWidth = 1
        textField.placeholder = R.string.localizable.catalogSearch()
        textField.layer.cornerRadius = 20
        return textField
    }()
    
    private let searchImageView: UIImageView = {
        let image = UIImageView()
        image.image = R.image.searchIcon()
        return image
    }()
    
    private let favoriteButton: UIButton = {
        let button = UIButton()
        button.contentMode = .scaleAspectFit
        button.setImage(R.image.favoriteCircle(), for: .normal)
        return button
    }()
    
    // MARK: - External vars
    var interactor: CatalogBusinessLogic?
    var router: (NSObjectProtocol & CatalogRoutingLogic & CatalogDataPassing)?
    weak var delegate: CatalogViewControllerDelegate?

    // MARK: - Internal vars
    private var isFavourite = false
    private var favouritesIds: [Int] = []
    private var favourites: [CatalogItemModel] = []
    
    private var selectedCategory = 0
    private var catalog: [CategoryModel] = []

    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        CatalogConfigurator.shared.configure(self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        CatalogConfigurator.shared.configure(self)
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
}

// MARK: - Display logic
extension CatalogViewController: CatalogDisplayLogic {
    
    func display(viewModel: Catalog.Model.ViewModel.ViewModelType) {
        switch viewModel {
        case .catalog(let viewModel):
            self.catalog = viewModel
            if catalog.isEmpty {
                orderCalc.isHidden = true
            } else {
                orderCalc.isHidden = false
            }
            interactor?.make(request: .fetchFavourites)
        case .presentFavouritesIds(let viewModel):
            favouritesIds = viewModel
            
            if isFavourite {
                interactor?.make(request: .getFavourites(favouritesIds, catalog))
            } else {
                interactor?.make(request: .fetchCatalogWithFavorites(catalog, favouritesIds))
            }
        case .presentFavourites(let viewModel):
            favourites = viewModel
            tableView.reloadData()
        case .presentCatalogWithFavorites(let viewModel):
            self.catalog = viewModel
            catalogCategories.setupCell(with: catalog, selectedCategories: selectedCategory)
            tableView.reloadData()
        }
    }
}

// MARK: - TableView Data Sourse
extension CatalogViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if isFavourite {
            return favourites.count
        }
        
        if catalog.isEmpty {
            return 0
        }
        
        return catalog[selectedCategory].items.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let row = indexPath.row
        
        let cell = tableView.dequeueReusableCell(of: ServiceTableViewCell.self)
        cell.delegate = self
        cell.selectionStyle = .none
        
        if isFavourite {
            cell.setupCell(with: favourites[row])
        } else {
            cell.setupCell(with: catalog[selectedCategory].items[row])
        }
    
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
}

// MARK: - TableView Delegate
extension CatalogViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return CGFloat.leastNormalMagnitude
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        return UIView(frame: .zero)
    }
    
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        return UIView(frame: .zero)
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return CGFloat.leastNormalMagnitude
    }
}


// MARK: - Private methods
private extension CatalogViewController {
    private func setupView() {
        view.backgroundColor = .mainBackgroundColor
        
        view.addSubview(searchTextField)
        view.addSubview(searchImageView)
        view.addSubview(favoriteButton)
        view.addSubview(catalogCategories)
        view.addSubview(tableView)
        view.addSubview(orderCalc)
        
        orderCalc.delegate = self
        configureTableView()
        catalogCategories.delegate = self
        searchTextField.delegate = self
        setupNavBar(withTitle: R.string.localizable.tabCatalog(), type: .titleOnly)
        setupDissmisKeyboard()
        setupConstrains()
        
        favoriteButton.addTarget(self, action: #selector(favoriteButtonTapped), for: .touchUpInside)
        
        interactor?.make(request: .fetchCatalog)
    }
    
    private func setupConstrains() {
        
        searchImageView.snp.makeConstraints {
            $0.centerY.equalTo(searchTextField)
            $0.leading.equalTo(searchTextField).inset(12)
            $0.width.height.equalTo(16)
        }
        
        searchTextField.snp.makeConstraints {
            $0.top.equalTo(view.safeAreaLayoutGuide.snp.top).offset(2)
            $0.leading.equalToSuperview().inset(16)
            $0.trailing.equalTo(favoriteButton.snp.leading).offset(-10)
            $0.height.equalTo(45)
        }
        
        favoriteButton.snp.makeConstraints {
            $0.centerY.equalTo(searchTextField)
            $0.trailing.equalToSuperview().inset(16)
        }

        catalogCategories.snp.makeConstraints {
            $0.top.equalTo(searchTextField.snp.bottom).offset(13)
            $0.leading.trailing.equalToSuperview().inset(16)
            $0.height.equalTo(60)
        }
        
        tableView.snp.makeConstraints {
            $0.top.equalTo(catalogCategories.snp.bottom).offset(23)
            $0.leading.equalToSuperview()
            $0.trailing.equalToSuperview()
            $0.bottom.equalTo(orderCalc.snp.top)
        }
        
        orderCalc.snp.makeConstraints {
            $0.leading.trailing.equalTo(view)
            $0.bottom.equalTo(view.safeAreaLayoutGuide.snp.bottom)
            $0.height.equalTo(60)
        }
    }
    
    private func configureTableView() {
        tableView.backgroundColor = .mainBackgroundColor
        tableView.delegate = self
        tableView.dataSource = self
        tableView.tableHeaderView = nil
        tableView.tableFooterView = UIView(frame: .zero)
        tableView.separatorStyle = .none
        tableView.showsVerticalScrollIndicator = false
    }
    
    @objc private func handleTapGesture() {
        searchTextField.becomeFirstResponder()
        view.endEditing(true)
    }
    
    @objc private func favoriteButtonTapped() {
        if UserDefaultsWorker.fetchActiveAccessToken() == nil {
            delegate?.routeToAuth()
        } else {
            if !isFavourite {
                isFavourite = true
                
                interactor?.make(request: .fetchFavourites)
                catalogCategories.selectedCategory(with: -1)
                favoriteButton.setImage(R.image.favoriteCircleActive(), for: .normal)
            }
//            if isFavourite {
//                interactor?.make(request: .fetchFavourites)
//                catalogCategories.selectedCategory(with: -1)
//                favoriteButton.setImage(R.image.favoriteCircleActive(), for: .normal)
//            } else {
//                catalogCategories.selectedCategory(with: selectedCategory)
//                tableView.reloadData()
//                favoriteButton.setImage(R.image.favoriteCircle(), for: .normal)
//            }
        }
    }
}

// MARK: - Public methods
extension CatalogViewController: UITextFieldDelegate {
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        // Добавить логику поиска или обработку введенных данных
        return true
    }
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        let searchText = (textField.text as NSString?)?.replacingCharacters(in: range, with: string) ?? ""
        // Добавить логику для обновления результатов поиска
        return true
    }
}

// MARK: - CatalogView Delegate
extension CatalogViewController: CategoriesViewDelegate {
    func didSelectItem(at index: Int) {
        selectedCategory = index
        
        isFavourite = false
        favoriteButton.setImage(R.image.favoriteCircle(), for: .normal)
        
        tableView.reloadData()
    }
}

//MARK: - ServiceTableViewCell Delegate
extension CatalogViewController: ServiceTableViewCellDelegate {
    func refreshFullPrice() {
        orderCalc.setupView()
        tableView.reloadData()
    }
    
    func setFavorite(id: Int, isFavorite: Bool) {
        isFavorite ? interactor?.make(request: .addFavourites(id)) : interactor?.make(request: .removeFavourites(id))
        
        if self.isFavourite {
            
            for index in 0..<favourites.count {
                print(index)
                if favourites[index].id == id {
                    favourites.remove(at: index)
                    break
                }
            }
        }
        
        for i in 0..<catalog.count {
            for index in 0..<catalog[i].items.count {
                if catalog[i].items[index].id == id {
                    catalog[i].items[index].isFavorite = isFavorite
                }
            }
        }
        tableView.reloadData()
    }
    
    func errorAuth() {
        delegate?.routeToAuth()
    }
}

//MARK: - OrderValueView Delegate
extension CatalogViewController: OrderValueViewDelegate {
    func routeToMap() {
        if UserDefaultsWorker.fetchActiveAccessToken() == nil {
            delegate?.routeToAuth()
        } else {
            router?.routeToMap()
        }
    }
}
