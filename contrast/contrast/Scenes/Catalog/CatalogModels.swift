//
//  CatalogModels.swift
//  contrast
//
//  Created by Roman Kiruxin on 29.06.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum Catalog {
    
    enum Model {
        struct Request {
            enum RequestType {
                case fetchCatalog
                case fetchFavourites
                case addFavourites(_ id: Int)
                case removeFavourites(_ id: Int)
                case getFavourites(_ favouritesIds: [Int],_ catalog: [CategoryModel])
                case fetchCatalogWithFavorites(_ catalog: [CategoryModel], _ favouritesIds: [Int])
            }
        }
        struct Response {
            enum ResponseType {
                case catalog(_ response: [CatalogResponse])
                case favouritesIds(_ response: [Int])
                case favourites(_ favouritesIds: [Int],_ catalog: [CategoryModel])
                case catalogWithFavorites(_ catalog: [CategoryModel], _ favouritesIds: [Int])
            }
        }
        struct ViewModel {
            enum ViewModelType {
                case catalog(_ viewModel: [CategoryModel])
                case presentFavouritesIds(_ viewModel: [Int])
                case presentFavourites(_ viewModel: [CatalogItemModel])
                case presentCatalogWithFavorites(_ catalog: [CategoryModel])
            }
        }
    }
}

struct CategoryModel {
    let id: Int
    let title: String
    var items: [CatalogItemModel]
    let imageUrl: String
}

struct CatalogItemModel {
    let id: Int
    let title: String
    let description: String
    let price: Float
    let additionalDescription: String
    var additionalServices: [AditionalServiceModel]
    let isExpressAvailable: Bool
    var isFavorite: Bool
}

struct AditionalServiceModel {
    let id: Int
    let title: String
    let price: Float
    let description: String
    var count: Int
}
