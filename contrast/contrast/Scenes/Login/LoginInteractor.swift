//
//  LoginInteractor.swift
//  contrast
//
//  Created by Roman Kiruxin on 03.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic {
    func make(request: Login.Model.Request.RequestType)
}

protocol LoginDataStore: AnyObject {
    
}

final class LoginInteractor {
    
    // MARK: - External vars
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    
    // MARK: - Internal vars
    private let service: Services
    
    init(service: NetworkServiceable) {
        self.service = Services(service: service)
    }
}

// MARK: - Business logic
extension LoginInteractor: LoginBusinessLogic {
    
    func make(request: Login.Model.Request.RequestType) {
        switch request {
        case .sendSms(let phone, let type):
            sendSms(phone, type)
        }
    }
}

// MARK: - Data store
extension LoginInteractor: LoginDataStore  {
   
}

// MARK: - Private methods
private extension LoginInteractor {
    private func sendSms(_ phone: String,_ type: Int) {
        let phone = MaskWorker.removePhoneMask(in: phone)
        let phoneWithCode = "7\(phone)"
        let userAuthRequest = UserAuthRequest(phone: phoneWithCode, type: type)
        UserDefaultsWorker.saveActiveUserPhone(phoneWithCode)
        
        service.performUserAuth(userAuthRequest) { [weak self] result in
            switch result {

            case .success(let response):
                print(response)
                self!.presenter?.presentData(response: .success(response))
            case .failure(let error):
                MessageService.showError(error)
            }
        }
    }
}
