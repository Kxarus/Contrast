//
//  LoginViewController.swift
//  contrast
//
//  Created by Roman Kiruxin on 03.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import BEMCheckBox

protocol LoginDisplayLogic: AnyObject {
    func display(viewModel: Login.Model.ViewModel.ViewModelType)
}

final class LoginViewController: UIViewController {
    
    // MARK: - IBOutlets
    private let titleLabel: UILabel = {
        let label = UILabel()
        label.font = GeneralFonts.generalMedium31
        label.textColor = .textDark
        label.text = R.string.localizable.inputPhoneTitle()
        label.numberOfLines = 0
        return label
    }()
    
    private let codeLabel: UILabel = {
        let label = UILabel()
        label.font = GeneralFonts.generalMedium32
        label.textColor = .textDark
        label.text = "+7"
        return label
    }()
    
    private let textField: UITextField = {
        let textField = UITextField()
        textField.placeholder = "(999) 999-99-99"
        textField.font = GeneralFonts.generalMedium32
        textField.keyboardType = .numberPad
        textField.textColor = .textDark
        return textField
    }()
    
    private lazy var checkBox: BEMCheckBox = {
        let checkBox = BEMCheckBox()
        checkBox.boxType = .square
        checkBox.offAnimationType = .oneStroke
        checkBox.onAnimationType = .stroke
        checkBox.delegate = self
        return checkBox
    }()
    
    private lazy var infoTextView: UITextView = {
        let text = "Вводя номер телефона вы соглашантесь с <a href=\"https://yandex.ru\" target=\"_blank\">условиями обработки данных</a> и условиях услуг по химчистке и подтверждаете что ознакомлены с <a href=\"https://yandex.ru\" target=\"_blank\">пользовательским соглашением</a>"
        let textView = UITextView()
        textView.attributedText = text.htmlToAttributedString
        textView.isEditable = false;
        textView.dataDetectorTypes = .all;
        textView.textAlignment = .left
        textView.font = GeneralFonts.generalRegular10
        textView.textColor = .textLight
        textView.backgroundColor = .clear
        return textView
    }()
    
    private let phoneButton: MainButton = {
        let button = MainButton()
        button.setupStyle(style: .border(image: R.image.smsIcon()))
        button.setTitle(R.string.localizable.smsLogin(), for: .normal)
        button.isEnabled = false
        return button
    }()
    
    private let telegramButton: MainButton = {
        let button = MainButton()
        button.setupStyle(style: .border(image: R.image.telegramIcon()))
        button.setTitle(R.string.localizable.telegramLogin(), for: .normal)
        button.isEnabled = false
        return button
    }()
    
    // MARK: - External vars
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    private let analytics = AnalyticsService.shared
    
    // MARK: - Internal vars
    private var isChecking = false
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        LoginConfigurator.shared.configure(self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        LoginConfigurator.shared.configure(self)
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
}

// MARK: - Display logic
extension LoginViewController: LoginDisplayLogic {
    
    func display(viewModel: Login.Model.ViewModel.ViewModelType) {
        switch viewModel {
        case .success(let viewModel):
            guard let botLink = viewModel.botLink else {
                router?.routeToVerify(withTimer: viewModel.timer, and: 0)
                return
            }
            openURL(url: botLink)
            router?.routeToVerify(withTimer: viewModel.timer, and: 1)
        }
    }
}

// MARK: - BEMCheckBox Delegate
extension LoginViewController: BEMCheckBoxDelegate {
    func didTap(_ checkBox: BEMCheckBox) {
        isChecking = !isChecking
        mainButtonActivate()
    }
}

// MARK: - TextField Delegate
extension LoginViewController: UITextFieldDelegate {
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
    }
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        
        textField.addPhoneMaskDefault(in: range, replacementString: string)
        mainButtonActivate()
        return false
    }
}

// MARK: - Private methods
private extension LoginViewController {
    private func setupView() {
        view.backgroundColor = .mainBackgroundColor
        
        view.addSubview(titleLabel)
        view.addSubview(codeLabel)
        view.addSubview(textField)
        view.addSubview(checkBox)
        view.addSubview(infoTextView)
        view.addSubview(phoneButton)
        view.addSubview(telegramButton)
        
        phoneButton.addTarget(self, action: #selector(pressPhoneButton), for: .touchUpInside)
        telegramButton.addTarget(self, action: #selector(pressTelegramButton), for: .touchUpInside)
        
        textField.delegate = self
        
        setupDissmisKeyboard()
        
        setupConstraints()
        analytics.routeTo(screen: .login)
    }
    
    private func setupConstraints() {
        phoneButton.snp.makeConstraints {
            $0.centerY.equalToSuperview().offset(-30)
            $0.leading.trailing.equalToSuperview().inset(16)
            $0.height.equalTo(46)
        }
        
        telegramButton.snp.makeConstraints {
            $0.top.equalTo(phoneButton.snp.bottom).offset(10)
            $0.leading.trailing.equalToSuperview().inset(16)
            $0.height.equalTo(46)
        }
        
        infoTextView.snp.makeConstraints {
            $0.bottom.equalTo(phoneButton.snp.top).offset(-14)
            $0.leading.equalToSuperview().inset(49)
            $0.trailing.equalToSuperview().inset(16)
            $0.height.equalTo(46)
        }
        
        checkBox.snp.makeConstraints {
            $0.centerY.equalTo(infoTextView)
            $0.leading.equalToSuperview().inset(18)
            $0.width.height.equalTo(19)
        }
        
        codeLabel.snp.makeConstraints {
            $0.bottom.equalTo(infoTextView.snp.top).offset(-28)
            $0.leading.equalToSuperview().inset(16)
        }
        
        textField.snp.makeConstraints {
            $0.bottom.height.equalTo(codeLabel)
            $0.leading.equalTo(codeLabel.snp.trailing).offset(10)
        }
        
        titleLabel.snp.makeConstraints {
            $0.bottom.equalTo(codeLabel.snp.top).offset(-13)
            $0.leading.trailing.equalToSuperview().inset(16)
        }
    }
    
    private func mainButtonActivate() {
        if textField.text?.count == 15 && isChecking {
            phoneButton.isEnabled = true
            telegramButton.isEnabled = true
        } else {
            phoneButton.isEnabled = false
            telegramButton.isEnabled = false
        }
    }
    
    private func openURL(url: String) {
        guard let url = URL(string: url) else {
          return
        }

        if #available(iOS 10.0, *) {
            UIApplication.shared.open(url, options: [:], completionHandler: nil)
        } else {
            UIApplication.shared.openURL(url)
        }
    }
    
    @objc private func pressPhoneButton() {
        guard let text = textField.text else { return }
        
        interactor?.make(request: .sendSms(text, type: 0))
    }
    
    @objc private func pressTelegramButton() {
        guard let text = textField.text else { return }
        interactor?.make(request: .sendSms(text, type: 1))
    }
}

// MARK: - Public methods
extension LoginViewController {
    
}


