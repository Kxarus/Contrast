//
//  TimeIntervalsOrderingViewController.swift
//  contrast
//
//  Created by Roman Kiruxin on 20.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TimeIntervalsOrderingDisplayLogic: AnyObject {
    func display(viewModel: TimeIntervalsOrdering.Model.ViewModel.ViewModelType)
}

final class TimeIntervalsOrderingViewController: UIViewController {
    
    // MARK: - IBOutlets
    private let expressButtonInfo: UIButton = {
        let button = UIButton()
        button.setImage(R.image.expressButtonInfo(), for: .normal)
        return button
    }()
    
    private let titleLabel: UILabel = {
        let label = UILabel()
        label.font = GeneralFonts.generalRegular15
        label.textColor = .textDark
        label.text = R.string.localizable.expressDelivery()
        return label
    }()
    
    private let descriptionLabel: UILabel = {
        let label = UILabel()
        label.font = GeneralFonts.generalRegular11
        label.textColor = .textLight
        return label
    }()
    
    private let switcher: UISwitch = {
        let switcher = UISwitch()
        switcher.onTintColor = .accent
        return switcher
    }()
    
    private let timeSlotsView: TimeSlotsView = {
        let view = TimeSlotsView()
        return view
    }()
    
    
    
    private let mainButton: MainButton = {
        let button = MainButton()
        button.setTitle(R.string.localizable.confirm(), for: .normal)
        button.isEnabledButton = false
        return button
    }()
    
    // MARK: - External vars
    var interactor: TimeIntervalsOrderingBusinessLogic?
    var router: (NSObjectProtocol & TimeIntervalsOrderingRoutingLogic & TimeIntervalsOrderingDataPassing)?
    
    // MARK: - Internal vars
    private var activeZones: [ZonesGeolocateInfo] = []
    private var addressData: UserAddressRequest?
    private var isSaveAddress = false
    
    private var selectedDate = ""
    private var selectedTime = ""
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        TimeIntervalsOrderingConfigurator.shared.configure(self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        TimeIntervalsOrderingConfigurator.shared.configure(self)
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
}

// MARK: - Display logic
extension TimeIntervalsOrderingViewController: TimeIntervalsOrderingDisplayLogic {
    
    func display(viewModel: TimeIntervalsOrdering.Model.ViewModel.ViewModelType) {
        switch viewModel {
            
        }
    }
}

// MARK: - Private methods
private extension TimeIntervalsOrderingViewController {
    private func setupView() {
        view.backgroundColor = .mainBackgroundColor
        
        view.addSubview(expressButtonInfo)
        view.addSubview(titleLabel)
        view.addSubview(descriptionLabel)
        view.addSubview(switcher)
        view.addSubview(timeSlotsView)
        
        view.addSubview(mainButton)
        
        timeSlotsView.delegate = self
        
        expressButtonInfo.addTarget(self, action: #selector(pressExpressButtonInfo), for: .touchUpInside)
        switcher.addTarget(self, action: #selector(editExpress), for: .valueChanged)
        mainButton.addTarget(self, action: #selector(pressMainButton), for: .touchUpInside)
        
        setupNavBar(withTitle: R.string.localizable.titleScreenTimeIntervalsOrdering(),type: .titleAndBackIcon, dismiss: true)
        fetchData()
        setupConstraints()
    }
    
    private func fetchData() {
        activeZones = router?.dataStore?.activeZones ?? []
        addressData = router?.dataStore?.addressData
        isSaveAddress = router?.dataStore?.isSaveAddress ?? false

        if !activeZones.isEmpty {
            configureIntervals()
        }
    }
    
    private func configureIntervals() {
        switch activeZones.count {
        case 1:
            guard let activeZone = activeZones.first else { return }
            
            let intervals = activeZone.intervals
            timeSlotsView.setupView(intervals: intervals)
            descriptionLabel.text = R.string.localizable.amountExpress() + "\(activeZone.minOrderSum.formattedString) ₽"
            
            if activeZone.isExpress {
                switcher.setOn(true, animated: false)
                switcher.isEnabled = false
            } else {
                switcher.setOn(false, animated: false)
                switcher.isEnabled = false
            }
        default:
            var activeZone: ZonesGeolocateInfo?
            var activeExpressZone: ZonesGeolocateInfo?
            
            for zone in activeZones {
                if zone.isExpress {
                    activeExpressZone = zone
                } else {
                    activeZone = zone
                }
            }
            //TODO: Описанная логика работает, если с бэка будет приходить 2 зоны, обязательно одна обычная, вторая - экспресс
            guard let activeZone = activeZone else { return }
            guard let activeExpressZone = activeExpressZone else { return }
            
            switcher.setOn(true, animated: false)
            let intervals = activeExpressZone.intervals
            timeSlotsView.setupView(intervals: intervals)
            descriptionLabel.text = R.string.localizable.amountExpress() + "\(activeExpressZone.minOrderSum.formattedString) ₽"
        }
    }
    
    private func mainButtonActivate() {
        if selectedDate != "" && selectedTime != "" {
            mainButton.isEnabledButton = true
        }
    }
    
    private func setupConstraints() {
        expressButtonInfo.snp.makeConstraints {
            $0.top.equalTo(view.safeAreaLayoutGuide).inset(24)
            $0.leading.equalToSuperview().inset(16)
            $0.width.equalTo(41)
            $0.height.equalTo(36)
        }
        
        titleLabel.snp.makeConstraints {
            $0.top.equalTo(expressButtonInfo)
            $0.leading.equalTo(expressButtonInfo.snp.trailing).offset(8)
        }
        
        descriptionLabel.snp.makeConstraints {
            $0.top.equalTo(titleLabel.snp.bottom).offset(5)
            $0.leading.equalTo(titleLabel)
        }
        
        switcher.snp.makeConstraints {
            $0.centerY.equalTo(expressButtonInfo)
            $0.trailing.equalToSuperview().inset(16)
            $0.width.equalTo(51)
            $0.height.equalTo(31)
        }
        
        timeSlotsView.snp.makeConstraints {
            $0.top.equalTo(expressButtonInfo.snp.bottom).offset(13)
            $0.leading.trailing.equalToSuperview()
            $0.height.equalTo(126)
        }
        
        
        
        mainButton.snp.makeConstraints {
            $0.bottom.equalTo(view.safeAreaLayoutGuide).inset(14)
            $0.leading.trailing.equalToSuperview().inset(16)
            $0.height.equalTo(46)
        }
    }
    
    @objc private func pressMainButton() {
        router?.routeToOrdering(selectedDate: selectedDate, selectedTime: selectedTime, addressData: addressData!, isSaveAddress: isSaveAddress)
    }
    
    @objc private func pressExpressButtonInfo() {
        router?.routeToExpressInfo()
    }
    
    @objc private func editExpress() {
        //TODO: переделать копирование кода
        var activeZone: ZonesGeolocateInfo?
        var activeExpressZone: ZonesGeolocateInfo?
        
        for zone in activeZones {
            if zone.isExpress {
                activeExpressZone = zone
            } else {
                activeZone = zone
            }
        }
        //TODO: Описанная логика работает, если с бэка будет приходить 2 зоны, обязательно одна обычная, вторая - экспресс
        guard let activeZone = activeZone else { return }
        guard let activeExpressZone = activeExpressZone else { return }
        
        if switcher.isOn {
            let intervals = activeExpressZone.intervals
            timeSlotsView.setupView(intervals: intervals)
            descriptionLabel.text = R.string.localizable.amountExpress() + "\(activeExpressZone.minOrderSum.formattedString) ₽"
        } else {
            let intervals = activeZone.intervals
            timeSlotsView.setupView(intervals: intervals)
            descriptionLabel.text = R.string.localizable.amountExpress() + "\(activeZone.minOrderSum.formattedString) ₽"
        }
    }
}

// MARK: - TimeSlotsView Delegate
extension TimeIntervalsOrderingViewController: TimeSlotsViewDelegate {
    func dateSelection(date: TimeIntervalModel) {
        selectedDate = date.day + " " + date.month
        mainButtonActivate()
    }
    
    func timeSelection(time: IntervalModel) {
        let intervalTimeStarts = time.timeStarts
        let intervalTimeFinish = time.timeFinish
        
        selectedTime = intervalTimeStarts + " до " + intervalTimeFinish
        mainButtonActivate()
    }
}
