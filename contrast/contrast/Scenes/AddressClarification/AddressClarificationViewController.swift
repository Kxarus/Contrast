//
//  AddressClarificationViewController.swift
//  contrast
//
//  Created by Roman Kiruxin on 18.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PanModal

protocol AddressClarificationDisplayLogic: AnyObject {
    func display(viewModel: AddressClarification.Model.ViewModel.ViewModelType)
}

final class AddressClarificationViewController: UIViewController {
    
    // MARK: - IBOutlets
    private let dragView: UIView = {
        let view = UIView()
        view.backgroundColor = .textLight
        view.layer.cornerRadius = 2.5
        return view
    }()
    
    private let cityStreetTextField: MainTextField = {
        let view = MainTextField()
        view.setupView(typeView: .another, codeText: R.string.localizable.cityStreet(), placeHolder: R.string.localizable.cityStreet())
        view.isUserInteractionEnabled = false
        return view
    }()
    
    private let segmentControl: UISegmentedControl = {
        let items = [R.string.localizable.flat(),
                     R.string.localizable.house(),
                     R.string.localizable.office(),
                     R.string.localizable.hotel()]
        let segmentControl = UISegmentedControl(items: items)
        segmentControl.backgroundColor = .mainBackgroundColor
        segmentControl.selectedSegmentTintColor = .textDark
        segmentControl.tintColor = .white
        segmentControl.selectedSegmentIndex = 0
        return segmentControl
    }()
    
    private let entryTextField: MainTextField = {
        let view = MainTextField()
        view.setupView(typeView: .entry, codeText: R.string.localizable.entry(), placeHolder: R.string.localizable.entry())
        return view
    }()

    private let floorTextField: MainTextField = {
        let view = MainTextField()
        view.setupView(typeView: .floor, codeText: R.string.localizable.floor(), placeHolder: R.string.localizable.floor())
        return view
    }()

    private let flatTextField: MainTextField = {
        let view = MainTextField()
        view.setupView(typeView: .flat, codeText: R.string.localizable.flat(), placeHolder: R.string.localizable.flat())
        return view
    }()
    
    private let intercomTextField: MainTextField = {
        let view = MainTextField()
        view.setupView(typeView: .intercom, codeText: R.string.localizable.intercom(), placeHolder: R.string.localizable.intercom())
        return view
    }()
    
    private let stackView: UIStackView = {
        let stackView = UIStackView()
        stackView.axis = .vertical
        return stackView
    }()
    
    private let commentTextField: MainTextField = {
        let view = MainTextField()
        view.setupView(typeView: .commentForCourier, codeText: R.string.localizable.commentForCourier(), placeHolder: R.string.localizable.commentForCourier())
        return view
    }()
    
    private let saveAddressLabel: UILabel = {
        let label = UILabel()
        label.textColor = .textDark
        label.font = GeneralFonts.generalRegular15
        label.text = R.string.localizable.saveUserAddress()
        return label
    }()
    
    private let switcher: UISwitch = {
        let switcher = UISwitch()
        switcher.onTintColor = .accent
        return switcher
    }()
    
    private let mainButton: MainButton = {
        let button = MainButton()
        button.setTitle(R.string.localizable.confirm(), for: .normal)
        button.isEnabledButton = false
        return button
    }()
    
    // MARK: - External vars
    var interactor: AddressClarificationBusinessLogic?
    var router: (NSObjectProtocol & AddressClarificationRoutingLogic & AddressClarificationDataPassing)?
    
    // MARK: - Internal vars
    private var selectedSegmentIndex = 0
    private var address = UserAddressRequest(city: "",
                                           street: "",
                                           house: "",
                                           latitude: 0,
                                           longitude: 0,
                                           type: 0,
                                           comment: "",
                                           intercom: "",
                                           entrance: "",
                                           floor: "",
                                           flat: "")
    private var selectedAddress: AddressDataModel?
    private var activeZones: [ZonesGeolocateInfo] = []
    private var originalViewHeight: CGFloat = 0.0
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        AddressClarificationConfigurator.shared.configure(self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        AddressClarificationConfigurator.shared.configure(self)
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        originalViewHeight = view.frame.height
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        if view.frame.height < originalViewHeight {
            originalViewHeight = view.frame.size.height
        }
        
        view.frame.size.height = originalViewHeight
    
        if UIScreen.main.bounds.height == 568.0 {
            NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
            NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil)
        }
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        if UIScreen.main.bounds.height == 568.0 {
            NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillShowNotification, object: nil)
            NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillHideNotification, object: nil)
        }
    }
}

// MARK: - Display logic
extension AddressClarificationViewController: AddressClarificationDisplayLogic {
    
    func display(viewModel: AddressClarification.Model.ViewModel.ViewModelType) {
        switch viewModel {
            
        }
    }
}

//MARK: - PanModalPresentable
extension AddressClarificationViewController: PanModalPresentable {
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    
    var showDragIndicator: Bool {
        return false
    }
    
    var panScrollable: UIScrollView? {
        return nil
    }
    
    var longFormHeight: PanModalHeight {
        return .maxHeight
    }
}


// MARK: - Private methods
private extension AddressClarificationViewController {
    private func setupView() {
        view.backgroundColor = .mainBackgroundColor
        
        view.addSubview(dragView)
        view.addSubview(cityStreetTextField)
        view.addSubview(segmentControl)
        view.addSubview(stackView)
        view.addSubview(commentTextField)
        view.addSubview(saveAddressLabel)
        view.addSubview(switcher)
        
        view.addSubview(mainButton)
        
        activeZones = router?.dataStore?.activeZones ?? []
        
        segmentControl.addTarget(self, action: #selector(tapSegmentControl), for: .valueChanged)
        mainButton.addTarget(self, action: #selector(pressMainButton), for: .touchUpInside)
        
        configureDelegates()
        fetchAddressData()
        configureView()
        
        setupDissmisKeyboard()
        
        setupConstraints()
    }
    
    private func configureDelegates() {
        cityStreetTextField.delegate = self
        entryTextField.delegate = self
        floorTextField.delegate = self
        flatTextField.delegate = self
        intercomTextField.delegate = self
        commentTextField.delegate = self
    }
    
    private func configureView() {
        stackView.removeAllArrangedViews()
        
        switch selectedSegmentIndex {
        case 0:
            configureFlatView()
            flatTextField.setupView(typeView: .flat, codeText: R.string.localizable.flat(), placeHolder: R.string.localizable.flat())
        case 2:
            configureFlatView()
            flatTextField.setupView(typeView: .flat, codeText: R.string.localizable.office(), placeHolder: R.string.localizable.office())
        case 3:
            configureFlatView()
            flatTextField.setupView(typeView: .flat, codeText: R.string.localizable.flat(), placeHolder: R.string.localizable.flat())
        default:
            break
        }
    }
    
    private func configureFlatView() {
        let containerView = UIView()
        
        containerView.addSubview(entryTextField)
        containerView.addSubview(floorTextField)
        containerView.addSubview(flatTextField)
        containerView.addSubview(intercomTextField)
        
        entryTextField.snp.makeConstraints {
            $0.top.equalToSuperview()
            $0.leading.equalToSuperview().inset(16)
            $0.width.equalTo((view.frame.width - 64) / 3)
            $0.height.equalTo(50)
        }
        
        floorTextField.snp.makeConstraints {
            $0.top.equalToSuperview()
            $0.centerX.equalToSuperview()
            $0.width.equalTo((view.frame.width - 64) / 3)
            $0.height.equalTo(50)
        }
        
        flatTextField.snp.makeConstraints {
            $0.top.equalToSuperview()
            $0.trailing.equalToSuperview().inset(16)
            $0.width.equalTo((view.frame.width - 64) / 3)
            $0.height.equalTo(50)
        }
        
        intercomTextField.snp.makeConstraints {
            $0.top.equalTo(entryTextField.snp.bottom).offset(20)
            $0.leading.trailing.equalToSuperview().inset(16)
            $0.height.equalTo(50)
            $0.bottom.equalToSuperview()
        }
        
        stackView.addArrangedSubview(containerView)
    }
    
    private func checkRequiredFields() {
        switch selectedSegmentIndex {
        case 0:
            if address.entrance != "" && address.floor != "" && address.flat != "" {
                mainButton.isEnabledButton = true
            } else {
                mainButton.isEnabledButton = false
            }
        case 1:
            mainButton.isEnabledButton = true
        case 2:
            if address.flat != "" {
                mainButton.isEnabledButton = true
            } else {
                mainButton.isEnabledButton = false
            }
        case 3:
            if address.flat != "" {
                mainButton.isEnabledButton = true
            } else {
                mainButton.isEnabledButton = false
            }
        default:
            break
        }
    }
    
    private func fetchAddressData() {
        if let selectedAddress = router?.dataStore?.selectedAddress {
            address.city = selectedAddress.city
            address.street = selectedAddress.street
            address.latitude = selectedAddress.latitude
            address.longitude = selectedAddress.longitude
            address.house = selectedAddress.house
        }
        
        let cityStreet = address.city + ", " + address.street + ", " + address.house
        cityStreetTextField.setText(text: cityStreet)
    }
    
    private func setupConstraints() {
        dragView.snp.makeConstraints {
            $0.top.equalToSuperview().inset(8)
            $0.centerX.equalToSuperview()
            $0.width.equalTo(60)
            $0.height.equalTo(5)
        }
        
        cityStreetTextField.snp.makeConstraints {
            $0.top.equalTo(dragView.snp.bottom).offset(33)
            $0.leading.trailing.equalToSuperview().inset(16)
            $0.height.equalTo(50)
        }
        
        segmentControl.snp.makeConstraints {
            $0.top.equalTo(cityStreetTextField.snp.bottom).offset(28)
            $0.leading.trailing.equalToSuperview().inset(18)
            $0.height.equalTo(38)
        }
        
        stackView.snp.makeConstraints {
            $0.top.equalTo(segmentControl.snp.bottom).offset(20)
            $0.leading.trailing.equalToSuperview()
        }
        
        commentTextField.snp.makeConstraints {
            $0.top.equalTo(stackView.snp.bottom).offset(20)
            $0.leading.trailing.equalToSuperview().inset(16)
            $0.height.equalTo(50)
        }
        
        saveAddressLabel.snp.makeConstraints {
            $0.top.equalTo(commentTextField.snp.bottom).offset(30)
            $0.leading.equalToSuperview().inset(16)
        }
        
        switcher.snp.makeConstraints {
            $0.centerY.equalTo(saveAddressLabel)
            $0.trailing.equalToSuperview().inset(16)
            $0.width.equalTo(51)
            $0.height.equalTo(31)
        }
        
        mainButton.snp.makeConstraints {
            $0.bottom.equalTo(view.safeAreaLayoutGuide).inset(15)
            $0.leading.trailing.equalToSuperview().inset(16)
            $0.height.equalTo(46)
        }
    }
    
    @objc private func pressMainButton() {
        router?.routeToTimeIntervalOrdering(activeZones: activeZones, addressData: address, isSaveAddress: switcher.isOn)
    }
    
    @objc private func tapSegmentControl() {
        selectedSegmentIndex = segmentControl.selectedSegmentIndex
        address.type = selectedSegmentIndex
        configureView()
        
        address.flat = ""
        address.floor = ""
        address.entrance = ""
        address.intercom = ""
        
        entryTextField.setText(text: "")
        floorTextField.setText(text: "")
        flatTextField.setText(text: "")
        intercomTextField.setText(text: "")
        
        checkRequiredFields()
    }
    
    @objc func keyboardWillShow(notification: NSNotification) {
        if let keyboardSize = (notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue {
            if self.view.frame.origin.y == 0 {
                self.view.frame.origin.y -= 100
            }
        }
    }

    @objc func keyboardWillHide(notification: NSNotification) {
        if self.commentTextField.frame.origin.y != 0 {
            self.view.frame.origin.y = 0
        }
    }
}

// MARK: - MainTextField Delegate
extension AddressClarificationViewController: MainTextFieldDelegate {
    func getTextField(text: String, type: ViewType) {
        switch type {
        case .entry:
            address.entrance = text
        case .flat:
            address.flat = text
        case .floor:
            address.floor = text
        case .intercom:
            address.intercom = text
        case .commentForCourier:
            address.comment = text
        default:
            break
        }
        checkRequiredFields()
    }
}


