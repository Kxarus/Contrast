//
//  OrderСancellationViewController.swift
//  contrast
//
//  Created by Владимир on 05.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PanModal

protocol OrderСancellationDisplayLogic: AnyObject {
    func display(viewModel: OrderСancellation.Model.ViewModel.ViewModelType)
}

final class OrderСancellationViewController: UIViewController {
    
    // MARK: - IBOutlets
    
    private let indicatorView: UIView = {
        let view = UIView()
        view.backgroundColor = .textLight
        view.layer.cornerRadius = 2.5
        return view
    }()
    
    private let titleLabel: UILabel = {
        let label = UILabel()
        label.text = R.string.localizable.titleMessageOrderCancellation()
        label.numberOfLines = 0
        label.font = GeneralFonts.generalRegular17
        label.textAlignment = .center
        label.textColor = .textDark
        return label
    }()
    
    private let descriptionLabel: UILabel = {
        let label = UILabel()
        label.text = R.string.localizable.descriptionMessageOrderCancellation()
        label.numberOfLines = 0
        label.font = GeneralFonts.generalRegular11
        label.textAlignment = .center
        label.textColor = .textLight
        return label
    }()
    
    private let closeButton: MainButton = {
        let button = MainButton()
        button.setTitle(R.string.localizable.close(), for: .normal)
        button.setupStyle(style: .border())
        return button
    }()
    
    private let cancelOrderButton: MainButton = {
        let button = MainButton()
        button.setTitle(R.string.localizable.cancelOrder(), for: .normal)
        return button
    }()
    
    // MARK: - External vars
    var interactor: OrderСancellationBusinessLogic?
    var router: (NSObjectProtocol & OrderСancellationRoutingLogic & OrderСancellationDataPassing)?
    var panScrollable: UIScrollView?
    
    // MARK: - Internal vars
    
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        OrderСancellationConfigurator.shared.configure(self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        OrderСancellationConfigurator.shared.configure(self)
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
}

// MARK: - Display logic
extension OrderСancellationViewController: OrderСancellationDisplayLogic {
    
    func display(viewModel: OrderСancellation.Model.ViewModel.ViewModelType) {
        switch viewModel {
            //case .some
        }
    }
}

// MARK: - Public methods
extension OrderСancellationViewController: PanModalPresentable {
    
    var longFormHeight: PanModalHeight {
        return .intrinsicHeight
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    
    var showDragIndicator: Bool {
        return false
    }
}

// MARK: - Private methods
private extension OrderСancellationViewController {
    private func setupView() {
        view.backgroundColor = .mainBackgroundColor
        
        view.addSubview(indicatorView)
        view.addSubview(titleLabel)
        view.addSubview(descriptionLabel)
        view.addSubview(closeButton)
        view.addSubview(cancelOrderButton)
        
        closeButton.addTarget(self, action: #selector(pressCloseButton), for: .touchUpInside)
        cancelOrderButton.addTarget(self, action: #selector(pressCancelOrderButton), for: .touchUpInside)
        setupConstraints()
    }
    
    private func setupConstraints() {
        
        indicatorView.snp.makeConstraints {
            $0.top.equalToSuperview().inset(8)
            $0.centerX.equalToSuperview()
            $0.width.equalTo(60)
            $0.height.equalTo(5)
        }
        
        titleLabel.snp.makeConstraints {
            $0.top.equalTo(indicatorView.snp.bottom).offset(28)
            $0.leading.trailing.equalToSuperview().inset(16)
        }
        
        descriptionLabel.snp.makeConstraints {
            $0.top.equalTo(titleLabel.snp.bottom).offset(10)
            $0.leading.trailing.equalToSuperview().inset(16)
        }
        
        closeButton.snp.makeConstraints {
            $0.top.equalTo(descriptionLabel.snp.bottom).offset(40)
            $0.leading.trailing.equalToSuperview().inset(16)
            $0.height.equalTo(46)
        }
        
        cancelOrderButton.snp.makeConstraints {
            $0.top.equalTo(closeButton.snp.bottom).offset(10)
            $0.leading.trailing.equalToSuperview().inset(16)
            $0.bottom.equalToSuperview().inset(54)
            $0.height.equalTo(46)
        }
    }
    
    @objc private func pressCloseButton() {
        router?.dismissScreen()
    }
    
    @objc private func pressCancelOrderButton() {
        router?.dismissScreen()
    }
}


