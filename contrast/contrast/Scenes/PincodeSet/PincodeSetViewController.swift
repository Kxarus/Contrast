//
//  PincodeSetViewController.swift
//  contrast
//
//  Created by Александра Орлова on 29.06.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
//import KeychainAccess
import LocalAuthentication

protocol PincodeSetDisplayLogic: AnyObject {
    func display(viewModel: PincodeSet.Model.ViewModel.ViewModelType)
}

final class PincodeSetViewController: UIViewController {
    
    // MARK: - IBOutlets
    private let logoImageView: UIImageView = {
        let imageView = UIImageView(image: R.image.constrastLogo())
        return imageView
    }()
    
    private let pincodeTitle: UILabel = {
        let label = UILabel()
        label.text = R.string.localizable.enterPincode()
        label.textAlignment = .center
        return label
    }()
    
    private let collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        let collectionView = PincodeCollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.register(PincodeCollectionViewCell.self, forCellWithReuseIdentifier: PincodeCollectionViewCell.cellId)
        collectionView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        return collectionView
    }()
    
    private let pincodeView = PincodeStack()
    
    // MARK: - External vars
    var interactor: PincodeSetBusinessLogic?
    var router: (NSObjectProtocol & PincodeSetRoutingLogic & PincodeSetDataPassing)?
    var biometryService = BiometryService()
    
    // MARK: - Internal vars
    private let digits = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "@", "0", ""]
    private var pincode = "" {
        didSet {
            changePincode()
        }
    }
    
    private var verificationPincode = ""
    private var isPincodeSetMode = false
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        PincodeSetConfigurator.shared.configure(self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        PincodeSetConfigurator.shared.configure(self)
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupView()
        biometryService.delegate = self
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        isPincodeSetMode = !(UserDefaultsWorker.fetchPincodeIsSet() ?? false)
        if !isPincodeSetMode {
            biometryService.enterWithBiometry()
        }
    }
}

// MARK: - Display logic
extension PincodeSetViewController: PincodeSetDisplayLogic {
    
    func display(viewModel: PincodeSet.Model.ViewModel.ViewModelType) {
        switch viewModel {
            //case .some
        }
    }
}

// MARK: - Private methods
private extension PincodeSetViewController {
    private func setupView() {
        view.backgroundColor = R.color.mainBackgroundColor()
        collectionView.delegate = self
        collectionView.dataSource = self
        setupCollectionView()
        setupConstraints()
    }
    
    private func setupCollectionView() {
        let height = self.view.frame.size.height
        let width = self.view.frame.size.width
        let layout = UICollectionViewFlowLayout()
        layout.itemSize = CGSize(width: width * 0.2, height: width * 0.2)
        layout.minimumLineSpacing = height * 0.02
        layout.minimumInteritemSpacing = 10
        collectionView.setCollectionViewLayout(layout, animated: false)
        collectionView.contentInset = UIEdgeInsets(top: 0, left: width * 0.08, bottom: 0, right: width * 0.08)
    }
    
    private func setupConstraints() {
        view.addSubview(logoImageView)
        view.addSubview(pincodeTitle)
        view.addSubview(pincodeView)
        view.addSubview(collectionView)
        
        logoImageView.snp.makeConstraints {
            $0.top.equalToSuperview().offset(50)
            $0.centerX.equalToSuperview()
            $0.width.equalTo(127)
            $0.height.equalTo(35)
        }
        
        pincodeTitle.snp.makeConstraints {
            $0.top.equalTo(logoImageView.snp.bottom).offset(39) 
            $0.leading.equalToSuperview().offset(16)
            $0.trailing.equalToSuperview().offset(-16)
            $0.height.equalTo(20)
        }
        
        pincodeView.snp.makeConstraints {
            $0.centerX.equalToSuperview()
            $0.height.equalTo(17)
            $0.width.equalTo(104)
            $0.top.equalTo(pincodeTitle.snp.bottom).offset(15)
        }
        
        collectionView.snp.makeConstraints {
            $0.leading.lessThanOrEqualToSuperview().offset(16)
            $0.trailing.lessThanOrEqualToSuperview().offset(-16)
            $0.centerX.equalToSuperview()
            $0.top.equalTo(pincodeView.snp.bottom).offset(56)
            $0.height.equalTo(667)
        }
    }
    
    private func changePincode() {
        pincodeView.colorPoints(count: pincode.count)
        
        if pincode.count == Constants.pincodeLength {
            guard isPincodeSetMode else {
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) { [weak self] in
                    self?.checkPincode()
                }
                
                return
            }
            
            if verificationPincode.isEmpty {
                verificationPincode = pincode
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) { [weak self] in
                    self?.pincodeTitle.text = R.string.localizable.enterPincodeAgain()
                    self?.pincode = ""
                }
            } else {
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) { [weak self] in
                    self?.comparePincods()
                }
            }
        }
    }
    
    private func checkPincode() {
        if let data = KeychainService.standard.read(service: Constants.pincodeService, account: Constants.pincodeKey) {
            if String(decoding: data, as: UTF8.self) == pincode {
                if UserDefaultsWorker.fetchBiometryChangeNeed() == true {
                    let context = LAContext()
                    KeychainService.standard.save(context.evaluatedPolicyDomainState, service: Constants.biometryService, account: Constants.biometryKey)
                    UserDefaultsWorker.saveBiometryChangeNeed(false)
                }

                DispatchQueue.main.async { [weak self] in
                    self?.router?.routeToMain()
                }
            } else {
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) { [weak self] in
                    self?.pincode = ""
                    let snackBar = CustomSnackbar(type: .wrongPincode)
                    snackBar.showSnackbar()
                }
            }
        }
    }
    
    private func comparePincods() {
        if pincode == verificationPincode {
            let pincodeData = Data(pincode.utf8)
            if KeychainService.standard.read(service: Constants.pincodeService, account: Constants.pincodeKey) != nil {
                KeychainService.standard.delete(service: Constants.pincodeService, account: Constants.pincodeKey)
            }

            KeychainService.standard.save(pincodeData, service: Constants.pincodeService, account: Constants.pincodeKey)
            UserDefaultsWorker.savePincodeIsSet(true)
            biometryService.setBiometry()
        } else {
            showPincodeErrorAlert()
        }
    }
    
    private func showPincodeErrorAlert() {
        let alertController = UIAlertController(title: R.string.localizable.pincodeSetError(), message: R.string.localizable.enterPincodeAgain(), preferredStyle: .alert)
        alertController.addAction(UIAlertAction(title: R.string.localizable.retry(), style: .cancel, handler: { [weak self] _ in
            self?.pincode = ""
            self?.verificationPincode = ""
            self?.pincodeTitle.text = R.string.localizable.enterPincode()
        }))
        
        present(alertController, animated: true)
    }
    
    private func showBiometryErrorAlert(error: BiometryErrorType) {
        let alertController = UIAlertController(title: R.string.localizable.attention(), message: error == .biometryChanged ? R.string.localizable.errorBiometry() : R.string.localizable.errorUnknown(), preferredStyle: .alert)
        alertController.addAction(UIAlertAction(title: R.string.localizable.ok(), style: .cancel))
        
        present(alertController, animated: true)
    }
}

// MARK: - Public methods
extension PincodeSetViewController: BiometryServiceDelegate {
    func routeToMain() {
        DispatchQueue.main.async { [weak self] in
            self?.router?.routeToMain()
        }
    }
    
    func showError(_ error: BiometryErrorType) {
        showBiometryErrorAlert(error: error)
    }
}

// MARK: - UICollectionViewDelegate, UICollectionViewDataSource
extension PincodeSetViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        12
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: PincodeCollectionViewCell.cellId, for: indexPath) as? PincodeCollectionViewCell else {
            return UICollectionViewCell()
        }
        
        switch indexPath.item {
        case 9:
            cell.setupFaceIdIcon(hidden: isPincodeSetMode)
        case 11:
            cell.setupClearIcon()
        default:
            cell.setupDigit(digits[indexPath.item])
        }
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        switch indexPath.item {
        case 9:
            if !isPincodeSetMode {
                biometryService.enterWithBiometry()
            }
        case 11:
            if pincode.count > 0 {
                pincode.removeLast()
            }
        default:
            if pincode.count < Constants.pincodeLength {
                pincode += digits[indexPath.item]
            }
        }
    }
}
