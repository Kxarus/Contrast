//
//  TabbarViewController.swift
//  contrast
//
//  Created by Roman Kiruxin on 29.06.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TabbarDisplayLogic: AnyObject {
    func display(viewModel: Tabbar.Model.ViewModel.ViewModelType)
}

final class TabbarViewController: UITabBarController {
    
    // MARK: - IBOutlets
    
    
    // MARK: - External vars
    var interactor: TabbarBusinessLogic?
    var router: (NSObjectProtocol & TabbarRoutingLogic & TabbarDataPassing)?
    
    // MARK: - Internal vars
    
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        TabbarConfigurator.shared.configure(self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        TabbarConfigurator.shared.configure(self)
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        UserDefaultsWorker.removeActiveSearchAddress()
    }
}

// MARK: - Display logic
extension TabbarViewController: TabbarDisplayLogic {
    
    func display(viewModel: Tabbar.Model.ViewModel.ViewModelType) {
        switch viewModel {
            //case .some
        }
    }
}

// MARK: - Private methods
private extension TabbarViewController {
    private func setupView() {
        self.delegate = self
        
        navigationController?.isNavigationBarHidden = true
        UserDefaultsWorker.saveOfferEnterCode(true)
        
        setupTabBar()
        setupViewControllers()
    }
    
    private func setupTabBar() {
        tabBar.backgroundColor = .white
        tabBar.tintColor = .textDark
        tabBar.barTintColor = .white
        
        UITabBarItem.appearance().setTitleTextAttributes([NSAttributedString.Key.font: R.font.interTightRegular(size: 10)],
                                                         for: .normal)
        UITabBarItem.appearance().setTitleTextAttributes([NSAttributedString.Key.font: R.font.interTightRegular(size: 10)],
                                                         for: .selected)
    }
    private func setupViewControllers() {
        
        let main = UINavigationController(rootViewController: MainDashboardViewController())
        main.isNavigationBarHidden = false
        
        let catalogVC = CatalogViewController()
        catalogVC.delegate = self
        let catalog = UINavigationController(rootViewController: catalogVC)
        catalog.isNavigationBarHidden = true
        
        let support = UINavigationController(rootViewController: SupportViewController())
        support.isNavigationBarHidden = true
        let contacts = UINavigationController(rootViewController: ContactsViewController())
        contacts.isNavigationBarHidden = true
        var profile = UINavigationController(rootViewController: ProfileViewController())
        profile.isNavigationBarHidden = true
        if UserDefaultsWorker.fetchActiveAccessToken() == nil {
            profile = UINavigationController(rootViewController: LoginViewController())
            profile.isNavigationBarHidden = true
        }
            
        main.tabBarItem.image = R.image.tabMain()
        catalog.tabBarItem.image = R.image.tabCatalog()
        support.tabBarItem.image = R.image.tabSupport()
        contacts.tabBarItem.image = R.image.tabContacts()
        profile.tabBarItem.image = R.image.tabProfile()
        
        main.tabBarItem.title = R.string.localizable.tabMain()
        catalog.tabBarItem.title = R.string.localizable.tabCatalog()
        support.tabBarItem.title = R.string.localizable.tabSupport()
        contacts.tabBarItem.title = R.string.localizable.tabContacts()
        profile.tabBarItem.title = R.string.localizable.tabProfile()
        
        setViewControllers([main, catalog, support, contacts, profile], animated: false)
    }
}

//MARK: - UITabBarController Delegate
extension TabbarViewController: UITabBarControllerDelegate {
    
    func tabBarController(_ theTabBarController: UITabBarController, shouldSelect viewController: UIViewController) -> Bool {
        return theTabBarController.selectedViewController != viewController
    }
}

//MARK: - CatalogViewController Delegate
extension TabbarViewController: CatalogViewControllerDelegate {
    func routeToAuth() {
        selectedIndex = 4
    }
}
