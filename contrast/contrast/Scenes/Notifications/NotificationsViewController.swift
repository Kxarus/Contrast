//
//  NotificationsViewController.swift
//  contrast
//
//  Created by Александра Орлова on 03.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NotificationsDisplayLogic: AnyObject {
    func display(viewModel: Notifications.Model.ViewModel.ViewModelType)
}

final class NotificationsViewController: UIViewController {
    
    // MARK: - IBOutlets
    private let tableView: UITableView = {
        let tableView = UITableView()
        tableView.showsVerticalScrollIndicator = false
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.allowsSelection = false
        tableView.separatorStyle = .none
        return tableView
    }()
    
    private let dateView: UILabel = {
        let label = UILabel()
        label.font = GeneralFonts.generalRegular13
        label.textColor = R.color.textLight()
        label.textAlignment = .center
        return label
    }()
    
    // MARK: - External vars
    var interactor: NotificationsBusinessLogic?
    var router: (NSObjectProtocol & NotificationsRoutingLogic & NotificationsDataPassing)?
    private let analytics = AnalyticsService.shared
    
    // MARK: - Internal vars
    private var notifications = [NotificationsModel(date: "12 марта", notification: [
        NotificationItem(message: "Ваши вещи по заказу № 3478933045 прошли химчистку. Скоро мы их вам привезем!", time: "12:03", hasQuestion: false),
    NotificationItem(message: "Цена на заказ № 3478933045 изменилась. Новая цена 3900 рублей", time: "11:55", hasQuestion: true)])]
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        NotificationsConfigurator.shared.configure(self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        NotificationsConfigurator.shared.configure(self)
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupView()
    }
}

// MARK: - Display logic
extension NotificationsViewController: NotificationsDisplayLogic {
    
    func display(viewModel: Notifications.Model.ViewModel.ViewModelType) {
        switch viewModel {
            //case .some
        }
    }
}

// MARK: - Private methods
private extension NotificationsViewController {
    private func setupView() {
        view.backgroundColor = R.color.mainBackgroundColor()
        setupNavBar(withTitle: R.string.localizable.notifications())
        setupTableView()
        analytics.routeTo(screen: .notifications)
    }
    
    private func setupTableView() {
        tableView.delegate = self
        tableView.dataSource = self
        tableView.backgroundColor = R.color.mainBackgroundColor()
        tableView.register(cellTypes: [NotificationTableViewCell.self])
        
        view.addSubview(tableView)
        
        tableView.snp.makeConstraints {
            $0.top.bottom.equalToSuperview()
            $0.leading.equalToSuperview().offset(16)
            $0.trailing.equalToSuperview().offset(-16)
        }
    }
}

// MARK: - UITableViewDelegate, UITableViewDataSource
extension NotificationsViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        notifications[section].notification.count
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        notifications.count
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        dateView.text = notifications[section].date
        return dateView
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(of: NotificationTableViewCell.self)
        
        cell.setupCell(model: notifications[indexPath.section].notification[indexPath.row])
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
       return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        150
    }
}


