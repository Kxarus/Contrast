//
//  SmsConfirmInteractor.swift
//  contrast
//
//  Created by Александра Орлова on 03.07.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SmsConfirmBusinessLogic {
    func make(request: SmsConfirm.Model.Request.RequestType)
}

protocol SmsConfirmDataStore: AnyObject {
    var timer: Int? { get set }
    var verifyType: Int? { get set }
}

final class SmsConfirmInteractor {
    
    // MARK: - External vars
    var presenter: SmsConfirmPresentationLogic?
    var worker: SmsConfirmWorker?
    
    // MARK: - Internal vars
    private let service: Services
    var timer: Int?
    var verifyType: Int?
    
    init(service: NetworkServiceable) {
        self.service = Services(service: service)
    }
}

// MARK: - Business logic
extension SmsConfirmInteractor: SmsConfirmBusinessLogic {
    
    func make(request: SmsConfirm.Model.Request.RequestType) {
        switch request {
        case .verify(let code):
            verifyCode(code)
        case .sendSms:
            sendSms()
        }
    }
}

// MARK: - Data store
extension SmsConfirmInteractor: SmsConfirmDataStore  {

}

// MARK: - Private methods
private extension SmsConfirmInteractor {
    private func sendSms() {
        let phone = UserDefaultsWorker.fetchActiveUserPhone()!
        let type = verifyType!
        let userAuthRequest = UserAuthRequest(phone: phone, type: type)
        
        service.performUserAuth(userAuthRequest) { [weak self] result in
            switch result {

            case .success(let response):
                print(response)
                self!.presenter?.presentData(response: .successSend(response))
            case .failure(let error):
                MessageService.showError(error)
            }
        }
    }
    
    private func verifyCode(_ code: String) {
        guard let phone = UserDefaultsWorker.fetchActiveUserPhone() else { return }
        
        let request = UserVerifyRequest(phone: phone, code: code)
        service.performUserVerify(request) { [weak self] result in
            switch result {
            case .success(let response):
                UserDefaultsWorker.saveActiveAccessToken(response.accessToken)
                UserDefaultsWorker.saveActiveRefreshToken(response.refreshToken)
                self?.presenter?.presentData(response: .successUserAuth(response.isFirstRegister))
            case .failure(let error):
                print("---\(String(describing: type(of: self))): Error in \(#function) - \(error.code) \(error.message)")
                self?.presenter?.presentData(response: .failureUserAuth)
                MessageService.showError(error)
            }
        }
    }
}
